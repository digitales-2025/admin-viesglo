pipeline {
    agent any
    environment {
        BUILD_REF = sh(script: "echo -n '${BUILD_TAG}' | sha256sum | cut -c1-12", returnStdout: true).trim()

        PROJECT_NAME    = "viesglo"
        PROJECT_SERVICE   = "frontend"
        PROJECT_STAGE   = "develop"
        PROJECT_TRIPLET   = "${PROJECT_NAME}-${PROJECT_SERVICE}-${PROJECT_STAGE}"

        REMOTE_USER   = "docker_admin"
        REMOTE_IP     = "116.203.105.37"
        REMOTE_FOLDER = "/opt/docker/compose/projects/${PROJECT_NAME}-${PROJECT_STAGE}/"

        REGISTRY_CREDENTIALS = "dockerhub-digitalesacide-credentials"
        REGISTRY_URL         = "docker.io"
        REGISTRY_USER        = "digitalesacide"
        FULL_REGISTRY_URL = "${REGISTRY_URL}/${REGISTRY_USER}/${PROJECT_TRIPLET}"

        // SSH credentials
        SSH_CRED = "ssh-id_docker_admin"

        // ansible variables
        PROJECT_SERVICES  = "backend,frontend"  // Comma-separated list
        VAULT_CREDENTIALS_ID = "ansible-vault-viesglo-key"
    }
    stages {
        stage("Create ansible inventory") {
            steps {
                dir ("+devops/+$PROJECT_STAGE") {
                    sh """
                        sed -i 's/REMOTE_IP/${REMOTE_IP}/g' inventory.yml &&
                        sed -i 's/REMOTE_USER/${REMOTE_USER}/g' inventory.yml
                    """
                }
            }
        }
        stage("Build & Push") {
            parallel {
                stage("frontend") {
                    stages {
                        stage("Build & Push") {
                            steps {
                                script {
                                    def buildVariables = [
                                        NEXT_PUBLIC_BACKEND_URL: "https://viesglo-develop-backend.acide.win",
                                        // FIXME: setup when eqmx is ready
                                        NEXT_PUBLIC_MQTT_BROKER_URL: "ws://localhost:8083/mqtt",
                                        NEXT_PUBLIC_MQTT_USERNAME: "management@viesglo.test",
                                        NEXT_PUBLIC_MQTT_PASSWORD: "Management123!",
                                    ]

                                    def dockerBuildArgs = new StringBuilder()
                                    buildVariables.each { key, value ->
                                        dockerBuildArgs.append("--build-arg ${key}=\"${value}\" ")
                                    }

                                    def finalDockerArgs = dockerBuildArgs.toString().trim()
                                    echo "Generated Docker Build Args: '${finalDockerArgs}'"

                                    withDockerRegistry(credentialsId: "${REGISTRY_CREDENTIALS}") {
                                        def image = docker.build("${FULL_REGISTRY_URL}:${BUILD_REF}", "${finalDockerArgs} -f +devops/docker/Dockerfile .")
                                        image.push()
                                    }
                                }
                            }
                        }
                        stage("Fetch image at server") {
                            steps {
                                dir ("+devops/+$PROJECT_STAGE") {
                                    ansiblePlaybook(
                                        credentialsId: SSH_CRED,
                                        inventory: "inventory.yml",
                                        playbook: "../ansible/service_pull_and_setup.yml",
                                        vaultCredentialsId: VAULT_CREDENTIALS_ID,
                                        extras: "--extra-vars '@vault.yml'",
                                        extraVars: [
                                            _remote_folder: REMOTE_FOLDER,
                                            _image_tag: BUILD_REF,
                                            _full_registry_url: FULL_REGISTRY_URL,
                                            _project_name: PROJECT_NAME,
                                            _project_stage: PROJECT_STAGE,
                                            _project_service: PROJECT_SERVICE,
                                        ],
                                    )
                                }
                            }
                        }
                    }
                    post {
                        always {
                            sh "docker rmi ${FULL_REGISTRY_URL}:${BUILD_REF} || true"
                        }
                    }
                }
                stage("Setup target") {
                    steps {
                        dir ("+devops/+$PROJECT_STAGE") {
                            ansiblePlaybook(
                                credentialsId: SSH_CRED,
                                inventory: "inventory.yml",
                                playbook: "../ansible/setup_target.yml",
                                extraVars: [
                                    _remote_folder: REMOTE_FOLDER,
                                    _project_name: PROJECT_NAME,
                                    _project_stage: PROJECT_STAGE,
                                ],
                            )
                        }
                    }
                }
            }
        }
        stage("Up services") {
            steps {
                dir ("+devops/+$PROJECT_STAGE") {
                    ansiblePlaybook(
                        credentialsId: SSH_CRED,
                        inventory: "inventory.yml",
                        playbook: "../ansible/start_service.yml",
                        extraVars: [
                            _remote_folder_path: REMOTE_FOLDER,
                            _project_services: PROJECT_SERVICES,
                            _project_name: PROJECT_NAME,
                            _project_stage: PROJECT_STAGE,
                            _project_service: PROJECT_SERVICE,
                        ],
                    )
                }
            }
        }
    }
}
