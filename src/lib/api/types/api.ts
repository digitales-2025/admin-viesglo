/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AppController_getHello"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AppController_getHealthCheck"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener perfil del usuario actual */
    get: operations["UsersController_getMyProfile_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/paginated": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener usuarios con paginación
     * @description Obtiene una lista paginada de usuarios. Los administradores (rol MANAGEMENT) pueden ver todos los usuarios (activos e inactivos). El resto de roles solo verán los usuarios activos.
     */
    get: operations["UsersController_getUsersPaginated_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener todos los usuarios activos
     * @description Obtiene una lista de todos los usuarios activos del sistema. Se recomienda usar el endpoint paginado para mejor rendimiento.
     */
    get: operations["UsersController_getAllUsers_v1"];
    put?: never;
    /**
     * Crear nuevo usuario
     * @description Crea un nuevo usuario con Better Auth y asigna roles y permisos automáticamente.
     */
    post: operations["UsersController_createUser_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener usuario por ID */
    get: operations["UsersController_getUserById_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Actualización parcial de usuario
     * @description Actualiza parcialmente los datos de un usuario existente.
     */
    patch: operations["UsersController_updateUser_v1"];
    trace?: never;
  };
  "/v1/users/{id}/toggle-active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Alternar estado activo del usuario
     * @description Alterna automáticamente el estado activo/inactivo del usuario. Si está activo, se desactiva. Si está inactivo, se activa.
     */
    patch: operations["UsersController_toggleActiveUser_v1"];
    trace?: never;
  };
  "/v1/auth/signin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Iniciar sesión */
    post: operations["AuthController_signIn_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/signout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Cerrar sesión */
    post: operations["AuthController_signOut_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener usuario actual */
    get: operations["AuthController_getMe_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/update-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Actualizar contraseña del usuario */
    patch: operations["AuthController_updatePassword_v1"];
    trace?: never;
  };
  "/v1/auth/permissions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener permisos del usuario */
    get: operations["AuthController_getUserPermissions_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/token-info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Información del token actual */
    get: operations["AuthController_getTokenInfo_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/session": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Verificar estado de sesión */
    get: operations["AuthController_checkSession_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Crear un nuevo cliente */
    post: operations["ClientsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar cliente por ID */
    get: operations["ClientsController_findById_v1"];
    /** Actualizar un cliente existente */
    put: operations["ClientsController_update_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Eliminar (borrado lógico) un cliente */
    patch: operations["ClientsController_delete_v1"];
    trace?: never;
  };
  "/v1/clients/{id}/reactivate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Reactivar un cliente */
    patch: operations["ClientsController_reactivate_v1"];
    trace?: never;
  };
  "/v1/clients/ruc/{ruc}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar cliente por RUC */
    get: operations["ClientsController_findByRuc_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar clientes activos */
    get: operations["ClientsController_findActive_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/paginated": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar clientes con filtros y paginación */
    get: operations["ClientsController_findPaginated_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/perudev/sunat/{ruc}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Consultar información SUNAT por RUC */
    get: operations["ClientsController_fetchSunatInfo_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/contacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Agregar contacto a cliente */
    post: operations["ClientsController_addContact_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/contacts/{email}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Actualizar contacto de cliente */
    put: operations["ClientsController_updateContact_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/contacts/{email}/toggle-active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Activar/desactivar contacto de cliente */
    patch: operations["ClientsController_toggleActiveContact_v1"];
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    RoleResponseDto: {
      /**
       * @description ID del rol
       * @example role-123
       */
      id: string;
      /**
       * @description Nombre del rol
       * @example MANAGEMENT
       */
      name: string;
      /**
       * @description Descripción del rol
       * @example Gestión - Acceso total al sistema
       */
      description?: string;
      /**
       * @description Si es un rol del sistema (no eliminable)
       * @example false
       */
      isSystem: boolean;
      /**
       * @description Si el rol está activo
       * @example true
       */
      isActive: boolean;
      /**
       * @description Permisos del rol
       * @example [
       *       {
       *         "resource": "users",
       *         "action": "read"
       *       },
       *       {
       *         "resource": "projects",
       *         "action": "manage"
       *       }
       *     ]
       */
      permissions: {
        resource?: string;
        action?: string;
      }[];
      /**
       * Format: date-time
       * @description Fecha de creación
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
    };
    UserResponseDto: {
      /**
       * @description Identificador único de la entidad
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Indica si la entidad está activa
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación de la entidad
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de última actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /**
       * @description Fecha de eliminación (soft delete)
       * @example null
       */
      deletedAt?: Record<string, never> | null;
      /**
       * @description Nombre del usuario
       * @example Juan
       */
      name: string;
      /**
       * @description Apellido del usuario
       * @example Pérez
       */
      lastName: string;
      /**
       * @description Email del usuario
       * @example juan@ejemplo.com
       */
      email: string;
      /** @description Rol asignado al usuario */
      role?: components["schemas"]["RoleResponseDto"];
      /**
       * @description Si el email está verificado
       * @example true
       */
      emailVerified: boolean;
    };
    ErrorResponse: {
      /**
       * @description Unique identifier for the error instance
       * @example ERR_001_20231201_143022
       */
      id: string;
      /**
       * @description User-friendly error message
       * @example El recurso solicitado no fue encontrado
       */
      message: string;
      /**
       * @description Detailed error description for developers
       * @example Usuario con ID 123 no existe en la base de datos
       */
      userMessage?: string;
      /**
       * @description Error category classification
       * @example VALIDATION_ERROR
       */
      category: string;
      /**
       * @description Error severity level
       * @example MEDIUM
       * @enum {string}
       */
      severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
      /**
       * @description HTTP status code
       * @example 404
       */
      statusCode: number;
      /**
       * @description ISO 8601 timestamp when the error occurred
       * @example 2023-12-01T14:30:22.123Z
       */
      timestamp: string;
      /**
       * @description Request path where the error occurred
       * @example /api/v1/users/123
       */
      path: string;
      /**
       * @description HTTP method used in the request
       * @example GET
       * @enum {string}
       */
      method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "HEAD";
      /**
       * @description Technical error details (only available in development environment)
       * @example Database connection timeout after 5000ms
       */
      technicalDetails?: Record<string, never>;
      /**
       * @description Error stack trace (only available in development environment)
       * @example Error: Connection timeout
       *         at Database.connect (/app/db.js:42:15)
       */
      stack?: Record<string, never>;
    };
    BaseErrorResponse: {
      /**
       * @description Indicates whether the request was successful or not
       * @example false
       */
      success: boolean;
      /** @description Error details */
      error: components["schemas"]["ErrorResponse"];
    };
    UserListItemDto: {
      /**
       * @description Identificador único de la entidad
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Indica si la entidad está activa
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación de la entidad
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de última actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /**
       * @description Fecha de eliminación (soft delete)
       * @example null
       */
      deletedAt?: Record<string, never> | null;
      /**
       * @description Nombre del usuario
       * @example Juan
       */
      name: string;
      /**
       * @description Apellido del usuario
       * @example Pérez
       */
      lastName: string;
      /**
       * @description Nombre completo del usuario
       * @example Juan Pérez
       */
      fullName: string;
      /**
       * @description Email del usuario
       * @example juan@ejemplo.com
       */
      email: string;
      /**
       * @description Email enmascarado
       * @example ju***@ejemplo.com
       */
      maskedEmail: string;
      /**
       * @description Solo el nombre del rol
       * @example MANAGEMENT
       */
      roleName?: string;
      /**
       * @description Si el email está verificado
       * @example true
       */
      emailVerified: boolean;
    };
    PaginationMetadataDto: {
      /**
       * @description Número total de elementos
       * @example 150
       */
      total: number;
      /**
       * @description Página actual
       * @example 1
       */
      page: number;
      /**
       * @description Elementos por página
       * @example 10
       */
      pageSize: number;
      /**
       * @description Número total de páginas
       * @example 15
       */
      totalPages: number;
      /**
       * @description Si hay página siguiente
       * @example true
       */
      hasNext: boolean;
      /**
       * @description Si hay página anterior
       * @example false
       */
      hasPrevious: boolean;
    };
    PaginatedUserResponseDto: {
      /** @description Lista de usuarios paginados */
      data: components["schemas"]["UserListItemDto"][];
      /** @description Metadatos de paginación */
      meta: components["schemas"]["PaginationMetadataDto"];
    };
    CreateUserRequestDto: {
      /**
       * @description Nombre del usuario
       * @example Juan
       */
      name: string;
      /**
       * @description Apellido del usuario
       * @example Pérez
       */
      lastName: string;
      /**
       * Format: email
       * @description Email del usuario
       * @example juan@ejemplo.com
       */
      email: string;
      /**
       * @description Contraseña del usuario (opcional, se genera automáticamente si no se proporciona)
       * @example MiContraseña123!
       */
      password?: string;
      /**
       * @description ID del rol a asignar al usuario
       * @example role-123
       */
      roleId: string;
    };
    UpdateUserRequestDto: {
      /**
       * @description Nombre del usuario
       * @example Juan Carlos
       */
      name?: string;
      /**
       * @description Apellido del usuario
       * @example Pérez García
       */
      lastName?: string;
      /**
       * Format: email
       * @description Email del usuario
       * @example nuevo.email@ejemplo.com
       */
      email?: string;
      /**
       * @description ID del rol a asignar al usuario
       * @example role-456
       */
      roleId?: string;
      /**
       * @description Estado activo del usuario
       * @example false
       */
      isActive?: boolean;
    };
    SignInDto: {
      /**
       * @description Email del usuario
       * @example usuario@ejemplo.com
       */
      email: string;
      /**
       * @description Contraseña del usuario
       * @example miContraseña123
       */
      password: string;
    };
    UpdatePasswordDto: {
      /**
       * @description Contraseña actual del usuario
       * @example ContraseñaActual123!
       */
      currentPassword: string;
      /**
       * @description Nueva contraseña del usuario
       * @example NuevaContraseña123!
       */
      password: string;
      /**
       * @description Confirmación de la nueva contraseña
       * @example NuevaContraseña123!
       */
      confirmPassword: string;
    };
    ClientContactRequestDto: {
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      /**
       * @description Teléfono del contacto
       * @example +51987654321
       */
      phone: string;
      /**
       * Format: email
       * @description Email del contacto
       * @example maria@empresa.com
       */
      email: string;
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive?: boolean;
    };
    ClientSunatInfoRequestDto: {
      /**
       * @description Dirección fiscal
       * @example Av. Principal 123
       */
      address: string;
      /**
       * @description Dirección completa
       * @example Av. Principal 123, Lima, Lima
       */
      fullAddress: string;
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      businessName: string;
      /**
       * @description Estado SUNAT
       * @example ACTIVO
       */
      state: string;
      /**
       * @description Condición SUNAT
       * @example HABIDO
       */
      condition: string;
      /**
       * @description Departamento
       * @example LIMA
       */
      department: string;
      /**
       * @description Provincia
       * @example LIMA
       */
      province: string;
      /**
       * @description Distrito
       * @example SAN ISIDRO
       */
      district: string;
    };
    CreateClientRequestDto: {
      /**
       * @description RUC del cliente
       * @example 20123456789
       */
      ruc: string;
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      name: string;
      /**
       * Format: email
       * @description Email del cliente
       * @example contacto@empresa.com
       */
      email: string;
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative: string;
      /**
       * @description Si el cliente está activo
       * @example true
       */
      isActive?: boolean;
      /** @description Contactos del cliente */
      contacts?: components["schemas"]["ClientContactRequestDto"][];
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoRequestDto"];
    };
    RucVO: {
      /** @example 20454777621 */
      value: string;
    };
    EmailVO: {
      /** @example contacto@empresa.com */
      value: string;
      /** @example empresa.com */
      domain: string;
      /** @example contacto */
      localPart: string;
    };
    PhoneVO: {
      /** @example +51987654321 */
      value: string;
    };
    ClientContactResponseDto: {
      /**
       * @description ID del contacto
       * @example contact-123
       */
      id: string;
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      _phone: components["schemas"]["PhoneVO"];
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive: boolean;
    };
    ClientSunatInfoResponseDto: {
      /**
       * @description Dirección fiscal
       * @example Av. Principal 123
       */
      address: string;
      /**
       * @description Dirección completa
       * @example Av. Principal 123, Lima, Lima
       */
      fullAddress: string;
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      businessName: string;
      /**
       * @description Estado SUNAT
       * @example ACTIVO
       */
      state: string;
      /**
       * @description Condición SUNAT
       * @example HABIDO
       */
      condition: string;
      /**
       * @description Departamento
       * @example LIMA
       */
      department: string;
      /**
       * @description Provincia
       * @example LIMA
       */
      province: string;
      /**
       * @description Distrito
       * @example SAN ISIDRO
       */
      district: string;
    };
    ClientOperationResponseDto: {
      /**
       * @description ID del cliente
       * @example client-123
       */
      id: string;
      _ruc: components["schemas"]["RucVO"];
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      name: string;
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative: string;
      /**
       * @description Si el cliente está activo
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /** @description Contactos del cliente */
      contacts?: components["schemas"]["ClientContactResponseDto"][];
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoResponseDto"];
    };
    UpdateClientRequestDto: {
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      name?: string;
      /**
       * Format: email
       * @description Email del cliente
       * @example contacto@empresa.com
       */
      email?: string;
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative?: string;
      /**
       * @description Si el cliente está activo
       * @example true
       */
      isActive?: boolean;
      /** @description Contactos del cliente */
      contacts?: components["schemas"]["ClientContactRequestDto"][];
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoRequestDto"];
    };
    ClientProfileResponseDto: {
      /**
       * @description ID del cliente
       * @example client-123
       */
      id: string;
      _ruc: components["schemas"]["RucVO"];
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      name: string;
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative: string;
      /**
       * @description Si el cliente está activo
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /** @description Contactos del cliente */
      contacts?: components["schemas"]["ClientContactResponseDto"][];
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoResponseDto"];
    };
    PaginatedClientResponseDto: {
      /** @description Lista de clientes paginados */
      data: components["schemas"]["ClientProfileResponseDto"][];
      /** @description Metadatos de paginación */
      meta: components["schemas"]["PaginationMetadataDto"];
    };
    ClientSunatFullInfoResponseDto: {
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoResponseDto"];
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative?: string;
    };
    AddContactRequestDto: {
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      /**
       * @description Teléfono del contacto
       * @example +51987654321
       */
      phone: string;
      /**
       * Format: email
       * @description Email del contacto
       * @example maria@empresa.com
       */
      email: string;
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive?: boolean;
    };
    ClientContactOperationResponseDto: {
      /**
       * @description ID del contacto
       * @example contact-123
       */
      id: string;
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      _phone: components["schemas"]["PhoneVO"];
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive: boolean;
    };
    UpdateContactRequestDto: {
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name?: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position?: string;
      /**
       * @description Teléfono del contacto
       * @example +51987654321
       */
      phone?: string;
      /**
       * @description Email del contacto
       * @example maria@empresa.com
       */
      email?: string;
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive?: boolean;
    };
    ClientContactToggleActiveResponseDto: {
      /**
       * @description ID del contacto
       * @example contact-123
       */
      id: string;
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      _phone: components["schemas"]["PhoneVO"];
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHello: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AppController_getHealthCheck: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_getMyProfile_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfil del usuario actual */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_getUsersPaginated_v1: {
    parameters: {
      query?: {
        /** @description Número de página (comenzando desde 1) */
        page?: number;
        /** @description Cantidad de elementos por página */
        size?: number;
        /** @description Filtrar por ID de rol específico */
        roleId?: string;
        /** @description Término de búsqueda para nombre, apellido o email */
        search?: string;
        /** @description Campo para ordenamiento */
        sortField?: "name" | "lastName" | "email" | "createdAt" | "updatedAt";
        /** @description Orden de clasificación */
        sortOrder?: "asc" | "desc";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista paginada de usuarios con metadatos de paginación */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedUserResponseDto"];
        };
      };
      /** @description Parámetros de paginación inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_getAllUsers_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista de usuarios */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"][];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_createUser_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequestDto"];
      };
    };
    responses: {
      /** @description Usuario creado exitosamente con datos completos de rol y permisos */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description Error al crear usuario */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Email ya está en uso */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Datos inválidos */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_getUserById_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Usuario encontrado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_updateUser_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequestDto"];
      };
    };
    responses: {
      /** @description Usuario actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_toggleActiveUser_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Estado del usuario alternado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_signIn_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDto"];
      };
    };
    responses: {
      /** @description Autenticación exitosa */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description Credenciales inválidas */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Demasiados intentos */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_signOut_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Sesión cerrada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_getMe_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Usuario obtenido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_updatePassword_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePasswordDto"];
      };
    };
    responses: {
      /** @description Contraseña actualizada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Datos de entrada inválidos o contraseñas no coinciden */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado o contraseña actual incorrecta */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_getUserPermissions_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Permisos obtenidos exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_getTokenInfo_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Información del token */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_checkSession_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Estado de sesión verificado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientsController_create_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateClientRequestDto"];
      };
    };
    responses: {
      /** @description Cliente creado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientOperationResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente ya existe */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_findById_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cliente encontrado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientProfileResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_update_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateClientRequestDto"];
      };
    };
    responses: {
      /** @description Cliente actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientOperationResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_delete_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cliente eliminado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_reactivate_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cliente reactivado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_findByRuc_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        ruc: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cliente encontrado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientProfileResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_findActive_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Clientes activos encontrados */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientProfileResponseDto"][];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_findPaginated_v1: {
    parameters: {
      query?: {
        /** @description Número de página */
        page?: number;
        /** @description Número de elementos por página */
        pageSize?: number;
        /** @description Término de búsqueda */
        search?: string;
        /** @description Campo para ordenamiento */
        sortField?: "name" | "lastName" | "email" | "createdAt" | "updatedAt";
        /** @description Orden de clasificación */
        sortOrder?: "asc" | "desc";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Clientes paginados encontrados */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedClientResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_fetchSunatInfo_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        ruc: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Información SUNAT encontrada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientSunatFullInfoResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_addContact_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddContactRequestDto"];
      };
    };
    responses: {
      /** @description Contacto agregado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientContactOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_updateContact_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        email: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateContactRequestDto"];
      };
    };
    responses: {
      /** @description Contacto actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientContactOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente o contacto no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_toggleActiveContact_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Contacto activado/desactivado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientContactToggleActiveResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente o contacto no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
}
