/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AppController_getHello"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AppController_getHealthCheck"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/webhooks/mqtt": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint genérico para webhooks MQTT
     * @description Endpoint genérico para testing de conectores MQTT y recepción de webhooks
     */
    post: operations["ProjectWebhookController_receiveGenericWebhook"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/webhooks/mqtt/project-notifications": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Recibir notificaciones generales de proyectos
     * @description Endpoint para recibir webhooks de notificaciones generales de proyectos desde EMQX
     */
    post: operations["ProjectWebhookController_receiveProjectNotification"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/webhooks/mqtt/deliverable-completed": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Recibir notificaciones de entregables completados
     * @description Endpoint para recibir webhooks cuando se completa un entregable
     */
    post: operations["ProjectWebhookController_receiveDeliverableCompleted"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/webhooks/mqtt/incident-created": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Recibir notificaciones de incidentes creados
     * @description Endpoint para recibir webhooks cuando se crea un incidente
     */
    post: operations["ProjectWebhookController_receiveIncidentCreated"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/mqtt/setup-project-system": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Configurar sistema MQTT para proyecto
     * @description Crea automáticamente conector, acción y regla MQTT para un proyecto específico
     */
    post: operations["MqttManagementController_setupProjectSystem"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/mqtt/simulate-event": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Simular evento MQTT
     * @description Simula un evento MQTT para testing del sistema de notificaciones
     */
    post: operations["MqttManagementController_simulateEvent"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/mqtt/connectors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Listar conectores MQTT
     * @description Obtiene la lista de todos los conectores MQTT configurados
     */
    get: operations["MqttManagementController_listConnectors"];
    put?: never;
    /**
     * Crear conector MQTT
     * @description Crea un nuevo conector MQTT para webhooks o notificaciones
     */
    post: operations["MqttManagementController_createConnector"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/mqtt/connectors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener conector por ID
     * @description Obtiene los detalles de un conector MQTT específico
     */
    get: operations["MqttManagementController_getConnector"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/mqtt/actions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Listar acciones MQTT
     * @description Obtiene la lista de todas las acciones MQTT configuradas
     */
    get: operations["MqttManagementController_listActions"];
    put?: never;
    /**
     * Crear acción MQTT
     * @description Crea una nueva acción MQTT asociada a un conector
     */
    post: operations["MqttManagementController_createAction"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/mqtt/rules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Listar reglas MQTT
     * @description Obtiene la lista de todas las reglas MQTT configuradas
     */
    get: operations["MqttManagementController_listRules"];
    put?: never;
    /**
     * Crear regla MQTT
     * @description Crea una nueva regla MQTT para procesar eventos
     */
    post: operations["MqttManagementController_createRule"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mqtt/diagnostics/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check MQTT synchronization status
     * @description Returns the MQTT synchronization status for all users in the system
     */
    get: operations["MqttDiagnosticsController_getSystemSyncStatus"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mqtt/diagnostics/status/user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check MQTT synchronization status for specific user
     * @description Returns the MQTT synchronization status for a specific user
     */
    get: operations["MqttDiagnosticsController_getUserSyncStatus"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mqtt/diagnostics/repair": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Repair MQTT synchronization issues
     * @description Automatically repairs MQTT synchronization issues for all users
     */
    post: operations["MqttDiagnosticsController_repairAllUsers"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mqtt/diagnostics/repair/user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Repair MQTT synchronization for specific user
     * @description Automatically repairs MQTT synchronization issues for a specific user
     */
    post: operations["MqttDiagnosticsController_repairUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mqtt/diagnostics/consistency": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Verify system consistency
     * @description Performs comprehensive system consistency checks including MQTT sync, user roles, and database integrity
     */
    get: operations["MqttDiagnosticsController_verifySystemConsistency"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mqtt/diagnostics/recovery": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Perform automatic system recovery
     * @description Automatically attempts to fix common system issues including MQTT sync problems and missing roles
     */
    post: operations["MqttDiagnosticsController_performAutomaticRecovery"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mqtt/diagnostics/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get system health summary
     * @description Returns a quick health summary of the MQTT synchronization system
     */
    get: operations["MqttDiagnosticsController_getSystemHealth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener perfil del usuario actual */
    get: operations["UsersController_getMyProfile_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/paginated": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener usuarios con paginación
     * @description Obtiene una lista paginada de usuarios. Los administradores (rol MANAGEMENT) pueden ver todos los usuarios (activos e inactivos). El resto de roles solo verán los usuarios activos.
     */
    get: operations["UsersController_getUsersPaginated_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener todos los usuarios activos
     * @description Obtiene una lista de todos los usuarios activos del sistema. Se recomienda usar el endpoint paginado para mejor rendimiento.
     */
    get: operations["UsersController_getAllUsers_v1"];
    put?: never;
    /**
     * Crear nuevo usuario con eventos de dominio
     * @description Crea un nuevo usuario con Better Auth, asigna roles automáticamente y ejecuta eventos de dominio para efectos secundarios (emails, sincronización, auditoría).
     */
    post: operations["UsersController_createUser_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener usuario por ID */
    get: operations["UsersController_getUserById_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Actualización parcial de usuario
     * @description Actualiza parcialmente los datos de un usuario existente.
     */
    patch: operations["UsersController_updateUser_v1"];
    trace?: never;
  };
  "/v1/users/{id}/toggle-active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Alternar estado activo del usuario
     * @description Alterna automáticamente el estado activo/inactivo del usuario. Si está activo, se desactiva. Si está inactivo, se activa.
     */
    patch: operations["UsersController_toggleActiveUser_v1"];
    trace?: never;
  };
  "/v1/users/{id}/change-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Cambiar contraseña de usuario (administradores)
     * @description Permite a un administrador cambiar la contraseña de cualquier usuario. Genera automáticamente el evento PasswordChangedEvent para envío de notificaciones y auditoría.
     */
    patch: operations["UsersController_changeUserPassword_v1"];
    trace?: never;
  };
  "/v1/auth/signin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Iniciar sesión */
    post: operations["AuthController_signIn_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/signout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Cerrar sesión */
    post: operations["AuthController_signOut_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener usuario actual con roles y permisos */
    get: operations["AuthController_getMe_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener perfil del usuario actual */
    get: operations["AuthController_getProfile_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Actualizar perfil del usuario actual */
    patch: operations["AuthController_updateProfile_v1"];
    trace?: never;
  };
  "/v1/auth/update-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Actualizar contraseña del usuario */
    patch: operations["AuthController_updatePassword_v1"];
    trace?: never;
  };
  "/v1/auth/permissions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener permisos del usuario */
    get: operations["AuthController_getUserPermissions_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/token-info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Información del token actual */
    get: operations["AuthController_getTokenInfo_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/mqtt-credentials": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener credenciales MQTT del usuario autenticado */
    get: operations["AuthController_getMqttCredentials_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/session": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Verificar estado de sesión */
    get: operations["AuthController_checkSession_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Crear un nuevo cliente */
    post: operations["ClientsController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar cliente por ID */
    get: operations["ClientsController_findById_v1"];
    /** Actualizar un cliente existente */
    put: operations["ClientsController_update_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Eliminar (borrado lógico) un cliente */
    patch: operations["ClientsController_delete_v1"];
    trace?: never;
  };
  "/v1/clients/{id}/reactivate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Reactivar un cliente */
    patch: operations["ClientsController_reactivate_v1"];
    trace?: never;
  };
  "/v1/clients/ruc/{ruc}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar cliente por RUC */
    get: operations["ClientsController_findByRuc_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar clientes activos */
    get: operations["ClientsController_findActive_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/paginated": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar clientes con filtros y paginación */
    get: operations["ClientsController_findPaginated_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/perudev/sunat/{ruc}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Consultar información SUNAT por RUC */
    get: operations["ClientsController_fetchSunatInfo_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/contacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Agregar contacto a cliente */
    post: operations["ClientsController_addContact_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/contacts/{email}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Actualizar contacto de cliente */
    put: operations["ClientsController_updateContact_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/contacts/{email}/toggle-active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Activar/desactivar contacto de cliente */
    patch: operations["ClientsController_toggleActiveContact_v1"];
    trace?: never;
  };
  "/v1/clients/{id}/addresses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Agregar dirección a cliente */
    post: operations["ClientsController_addAddress_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/addresses/{addressId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Actualizar dirección de cliente */
    put: operations["ClientsController_updateAddress_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/clients/{id}/addresses/{addressId}/toggle-active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Activar/desactivar dirección de cliente */
    patch: operations["ClientsController_toggleActiveAddress_v1"];
    trace?: never;
  };
  "/v1/roles/paginated": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener roles con paginación
     * @description Obtiene una lista paginada de roles con filtros opcionales por nombre, descripción y estado activo. Incluye metadatos de paginación.
     */
    get: operations["RolesController_getRolesPaginated_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/roles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Crear nuevo rol
     * @description Crea un nuevo rol con permisos específicos. Valida unicidad del nombre y formato de permisos.
     */
    post: operations["RolesController_createRole_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/roles/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener todos los roles
     * @description Obtiene todos los roles activos sin paginación. Excluye roles del sistema. Útil para dropdowns y selects.
     */
    get: operations["RolesController_getAllRoles_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/roles/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener rol por ID */
    get: operations["RolesController_getRoleById_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Actualización parcial de rol
     * @description Actualiza parcialmente los datos de un rol existente. Sincroniza automáticamente con usuarios que tienen el rol asignado.
     */
    patch: operations["RolesController_updateRole_v1"];
    trace?: never;
  };
  "/v1/roles/{id}/toggle-active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Alternar estado activo del rol
     * @description Alterna automáticamente el estado activo/inactivo del rol. Si está activo, se desactiva y se remueve de usuarios. Si está inactivo, se reactiva.
     */
    patch: operations["RolesController_toggleActiveRole_v1"];
    trace?: never;
  };
  "/v1/roles/permissions/available": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Obtener permisos disponibles
     * @description Obtiene todos los recursos, acciones y combinaciones de permisos disponibles para la creación y actualización de roles.
     */
    get: operations["RolesController_getAvailablePermissions_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/project-templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Crear una nueva plantilla de proyecto */
    post: operations["ProjectTemplatesController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/project-templates/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar plantilla de proyecto por ID */
    get: operations["ProjectTemplatesController_findById_v1"];
    /** Actualizar una plantilla de proyecto existente */
    put: operations["ProjectTemplatesController_update_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/project-templates/{id}/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Eliminar (borrado lógico) una plantilla de proyecto */
    patch: operations["ProjectTemplatesController_delete_v1"];
    trace?: never;
  };
  "/v1/project-templates/{id}/reactivate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Reactivar una plantilla de proyecto */
    patch: operations["ProjectTemplatesController_reactivate_v1"];
    trace?: never;
  };
  "/v1/project-templates/paginated": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar plantillas de proyecto con filtros y paginación */
    get: operations["ProjectTemplatesController_findPaginated_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/project-templates/active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar plantillas de proyecto activas */
    get: operations["ProjectTemplatesController_findActive_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/project-templates/{id}/detailed": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar plantilla de proyecto por ID con milestone templates completos */
    get: operations["ProjectTemplatesController_findDetailedById_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Crear una nueva etiqueta */
    post: operations["TagController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/tags/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar etiqueta por ID */
    get: operations["TagController_findById_v1"];
    /** Actualizar una etiqueta existente */
    put: operations["TagController_update_v1"];
    post?: never;
    /** Eliminar una etiqueta */
    delete: operations["TagController_delete_v1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/tags/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar etiquetas por nombre (autocomplete) */
    get: operations["TagController_findByName_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Crear una nueva plantilla de hito */
    post: operations["MilestoneTemplatesController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar plantilla de hito por ID */
    get: operations["MilestoneTemplatesController_findById_v1"];
    /** Actualizar una plantilla de hito existente */
    put: operations["MilestoneTemplatesController_update_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates/{id}/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Eliminar (borrado lógico) una plantilla de hito */
    patch: operations["MilestoneTemplatesController_delete_v1"];
    trace?: never;
  };
  "/v1/milestone-templates/{id}/reactivate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Reactivar una plantilla de hito */
    patch: operations["MilestoneTemplatesController_reactivate_v1"];
    trace?: never;
  };
  "/v1/milestone-templates/{id}/toggle-active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Alternar estado activo de una plantilla de hito */
    patch: operations["MilestoneTemplatesController_toggleActive_v1"];
    trace?: never;
  };
  "/v1/milestone-templates/paginated": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar plantillas de hito con filtros y paginación */
    get: operations["MilestoneTemplatesController_findPaginated_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates/active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar plantillas de hito activas */
    get: operations["MilestoneTemplatesController_findActive_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates/by-name": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Buscar plantillas de hito por nombre (autocomplete) */
    get: operations["MilestoneTemplatesController_findByName_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates/{id}/phases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Agregar fase a una plantilla de hito */
    post: operations["MilestoneTemplatesController_addPhase_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates/{id}/phases/{phaseId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Actualizar una fase de una plantilla de hito */
    put: operations["MilestoneTemplatesController_updatePhase_v1"];
    post?: never;
    /** Eliminar una fase de una plantilla de hito */
    delete: operations["MilestoneTemplatesController_deletePhase_v1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates/{id}/phases/{phaseId}/deliverables": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Agregar entregable a una fase */
    post: operations["MilestoneTemplatesController_addDeliverable_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates/{id}/phases/{phaseId}/deliverables/{deliverableId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Actualizar un entregable de una fase */
    put: operations["MilestoneTemplatesController_updateDeliverable_v1"];
    post?: never;
    /** Eliminar un entregable de una fase */
    delete: operations["MilestoneTemplatesController_deleteDeliverable_v1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/milestone-templates/change-position": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Cambiar posición de un elemento (fase o entregable) */
    patch: operations["MilestoneTemplatesController_changePosition_v1"];
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    WebhookResponseDto: {
      /**
       * @description Indica si el webhook fue recibido exitosamente
       * @example true
       */
      received: boolean;
      /**
       * @description Timestamp de cuando se recibió el webhook
       * @example 2024-01-15T10:30:00Z
       */
      timestamp: string;
      /**
       * @description Mensaje descriptivo del resultado
       * @example Webhook processed successfully
       */
      message: string;
      /**
       * @description ID de procesamiento interno (para tracking)
       * @example proc_12345
       */
      processingId: string;
    };
    ProjectNotificationWebhookDto: {
      /**
       * @description ID del proyecto
       * @example proj_123
       */
      projectId: string;
      /**
       * @description Timestamp del evento
       * @example 2024-01-15T10:30:00Z
       */
      timestamp?: string;
      /**
       * @description Metadatos adicionales del evento
       * @example {
       *       "source": "system",
       *       "version": "1.0"
       *     }
       */
      metadata?: Record<string, never>;
      /**
       * @description Tipo de evento del proyecto
       * @example status_change
       * @enum {string}
       */
      eventType: "status_change" | "milestone_reached" | "deadline_approaching" | "team_update";
      /**
       * @description Mensaje descriptivo del evento
       * @example Project status updated to In Progress
       */
      message: string;
      /**
       * @description Estado anterior del proyecto
       * @example Planning
       */
      previousStatus?: string;
      /**
       * @description Estado actual del proyecto
       * @example In Progress
       */
      currentStatus?: string;
    };
    WebhookErrorResponseDto: {
      /**
       * @description Indica que hubo un error procesando el webhook
       * @example false
       */
      received: boolean;
      /**
       * @description Timestamp de cuando ocurrió el error
       * @example 2024-01-15T10:30:00Z
       */
      timestamp: string;
      /**
       * @description Mensaje de error descriptivo
       * @example Invalid payload format
       */
      error: string;
      /**
       * @description Detalles adicionales del error
       * @example [
       *       "projectId is required",
       *       "eventType must be a valid enum value"
       *     ]
       */
      details: string[];
      /**
       * @description Código de error interno
       * @example VALIDATION_ERROR
       */
      errorCode: string;
    };
    DeliverableCompletedWebhookDto: {
      /**
       * @description ID del proyecto
       * @example proj_123
       */
      projectId: string;
      /**
       * @description Timestamp del evento
       * @example 2024-01-15T10:30:00Z
       */
      timestamp?: string;
      /**
       * @description Metadatos adicionales del evento
       * @example {
       *       "source": "system",
       *       "version": "1.0"
       *     }
       */
      metadata?: Record<string, never>;
      /**
       * @description ID del entregable
       * @example deliv_456
       */
      deliverableId: string;
      /**
       * @description Nombre del entregable
       * @example Frontend Implementation
       */
      deliverableName: string;
      /**
       * @description ID del usuario que completó el entregable
       * @example user_789
       */
      completedBy: string;
      /**
       * @description Fecha y hora de completado
       * @example 2024-01-15T10:30:00Z
       */
      completedAt: string;
      /**
       * @description Porcentaje de completado
       * @example 100
       */
      completionPercentage?: number;
      /**
       * @description Comentarios adicionales
       * @example Entregable completado exitosamente con todas las funcionalidades
       */
      comments?: string;
    };
    IncidentCreatedWebhookDto: {
      /**
       * @description ID del proyecto
       * @example proj_123
       */
      projectId: string;
      /**
       * @description Timestamp del evento
       * @example 2024-01-15T10:30:00Z
       */
      timestamp?: string;
      /**
       * @description Metadatos adicionales del evento
       * @example {
       *       "source": "system",
       *       "version": "1.0"
       *     }
       */
      metadata?: Record<string, never>;
      /**
       * @description ID del incidente
       * @example inc_789
       */
      incidentId: string;
      /**
       * @description Título del incidente
       * @example Critical System Error
       */
      incidentTitle: string;
      /**
       * @description Severidad del incidente
       * @example HIGH
       * @enum {string}
       */
      severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
      /**
       * @description ID del usuario que creó el incidente
       * @example user_456
       */
      createdBy: string;
      /**
       * @description Fecha y hora de creación
       * @example 2024-01-15T10:30:00Z
       */
      createdAt: string;
      /**
       * @description Descripción detallada del incidente
       * @example System experiencing critical errors affecting user authentication
       */
      description: string;
      /**
       * @description Categoría del incidente
       * @example TECHNICAL
       * @enum {string}
       */
      category?: "TECHNICAL" | "BUSINESS" | "SECURITY" | "PERFORMANCE";
      /**
       * @description Prioridad del incidente
       * @example URGENT
       * @enum {string}
       */
      priority?: "LOW" | "NORMAL" | "HIGH" | "URGENT";
    };
    SetupProjectSystemDto: {
      /**
       * @description ID único del proyecto
       * @example proj_123
       */
      projectId: string;
      /**
       * @description URL base del webhook para recibir notificaciones
       * @example https://api.example.com
       */
      webhookUrl: string;
      /**
       * @description Ruta específica para las notificaciones del proyecto
       * @example /webhooks/mqtt/project-notifications
       */
      notificationPath: string;
      /**
       * @description Nombre descriptivo del proyecto
       * @example Sistema de Gestión Viesglo
       */
      projectName?: string;
      /**
       * @description Descripción del sistema MQTT del proyecto
       * @example Sistema de notificaciones automáticas para el proyecto Viesglo
       */
      description?: string;
      /**
       * @description Etiquetas para categorizar el sistema MQTT
       * @example [
       *       "project",
       *       "notifications",
       *       "viesglo"
       *     ]
       */
      tags?: string[];
      /**
       * @description Metadatos adicionales del sistema
       * @example {
       *       "environment": "production",
       *       "version": "1.0"
       *     }
       */
      metadata?: Record<string, never>;
    };
    SetupProjectSystemResponseDto: {
      /**
       * @description Indica si la configuración fue exitosa
       * @example true
       */
      success: boolean;
      /**
       * @description Mensaje descriptivo del resultado
       * @example Sistema MQTT configurado exitosamente para el proyecto proj_123
       */
      message: string;
      /**
       * @description Información del conector creado
       * @example {
       *       "id": "http:project-proj_123-connector-1642234567890",
       *       "name": "project-proj_123-connector-1642234567890",
       *       "type": "http",
       *       "url": "https://api.example.com",
       *       "enable": true
       *     }
       */
      connector: Record<string, never>;
      /**
       * @description Información de la acción creada
       * @example {
       *       "id": "http:project-proj_123-action-1642234567890",
       *       "name": "project-proj_123-action-1642234567890",
       *       "type": "http",
       *       "connectorId": "http:project-proj_123-connector-1642234567890",
       *       "enable": true
       *     }
       */
      action: Record<string, never>;
      /**
       * @description Información de la regla creada
       * @example {
       *       "id": "project-proj_123-rule-1642234567890",
       *       "name": "project-proj_123-rule-1642234567890",
       *       "sql": "SELECT * FROM \"projects/proj_123/events/+\" WHERE payload.projectId = 'proj_123'",
       *       "actions": [
       *         "http:project-proj_123-action-1642234567890"
       *       ],
       *       "enable": true
       *     }
       */
      rule: Record<string, never>;
      /**
       * @description Timestamp de la configuración
       * @example 2024-01-15T10:30:00.000Z
       */
      timestamp: string;
      /**
       * @description Metadatos adicionales de la configuración
       * @example {
       *       "projectId": "proj_123",
       *       "setupDuration": "2.5s",
       *       "componentsCreated": 3
       *     }
       */
      metadata?: Record<string, never>;
    };
    ManagementErrorResponseDto: {
      /**
       * @description Indica que la operación falló
       * @example false
       */
      success: boolean;
      /**
       * @description Mensaje de error
       * @example Error al crear el conector MQTT
       */
      message: string;
      /**
       * @description Código de error específico
       * @example CONNECTOR_CREATION_FAILED
       */
      errorCode: string;
      /**
       * @description Detalles técnicos del error
       * @example {
       *       "originalError": "Connection timeout to EMQX API",
       *       "operation": "create_connector",
       *       "timestamp": "2024-01-15T10:30:00.000Z"
       *     }
       */
      details: Record<string, never>;
      /**
       * @description Timestamp del error
       * @example 2024-01-15T10:30:00.000Z
       */
      timestamp: string;
      /**
       * @description Sugerencias para resolver el error
       * @example [
       *       "Verificar la conectividad con EMQX",
       *       "Revisar las credenciales de API",
       *       "Intentar nuevamente en unos minutos"
       *     ]
       */
      suggestions?: string[];
    };
    SimulateEventDto: {
      /**
       * @description Tipo de evento a simular
       * @example project_notification
       * @enum {string}
       */
      eventType:
        | "project_notification"
        | "deliverable_completed"
        | "incident_created"
        | "milestone_reached"
        | "status_change";
      /**
       * @description ID del proyecto relacionado con el evento
       * @example proj_123
       */
      projectId: string;
      /**
       * @description Payload del evento a simular
       * @example {
       *       "message": "Test notification",
       *       "timestamp": "2024-01-15T10:30:00Z",
       *       "severity": "INFO"
       *     }
       */
      payload: Record<string, never>;
      /**
       * @description Tópico MQTT específico para el evento
       * @example projects/proj_123/events/notifications
       */
      topic?: string;
      /**
       * @description Nivel de QoS para el mensaje MQTT
       * @example 1
       * @enum {number}
       */
      qos?: 0 | 1 | 2;
    };
    SimulateEventResponseDto: {
      /**
       * @description Indica si la simulación fue exitosa
       * @example true
       */
      success: boolean;
      /**
       * @description Mensaje descriptivo del resultado
       * @example Evento simulado exitosamente
       */
      message: string;
      /**
       * @description Información del evento simulado
       * @example {
       *       "eventType": "project_notification",
       *       "projectId": "proj_123",
       *       "topic": "projects/proj_123/events/notifications",
       *       "qos": 1
       *     }
       */
      event: Record<string, never>;
      /**
       * @description Payload del evento enviado
       * @example {
       *       "message": "Test notification",
       *       "timestamp": "2024-01-15T10:30:00Z",
       *       "severity": "INFO"
       *     }
       */
      payload: Record<string, never>;
      /**
       * @description Timestamp de la simulación
       * @example 2024-01-15T10:30:00.000Z
       */
      timestamp: string;
      /**
       * @description ID del mensaje MQTT generado
       * @example msg_1642234567890
       */
      messageId?: string;
      /**
       * @description Información de las reglas que procesaron el evento
       * @example [
       *       {
       *         "ruleId": "60f7b3b3b3b3b3b3b3b3b3b5",
       *         "ruleName": "project-proj_123-rule-1642234567890",
       *         "matched": true,
       *         "actionsTriggered": 1
       *       }
       *     ]
       */
      rulesProcessed?: string[];
    };
    CreateConnectorDto: {
      /**
       * @description Nombre único del conector
       * @example webhook-connector-prod
       */
      name: string;
      /**
       * @description Tipo de conector
       * @example http
       * @enum {string}
       */
      type: "http";
      /**
       * @description URL del endpoint del conector
       * @example https://api.example.com/webhooks
       */
      url: string;
      /**
       * @description Timeout de conexión
       * @default 15s
       * @example 15s
       */
      connectTimeout: string;
      /**
       * @description Tamaño del pool de conexiones
       * @default 8
       * @example 8
       */
      poolSize: number;
      /**
       * @description Estado habilitado del conector
       * @default true
       * @example true
       */
      enable: boolean;
      /**
       * @description Headers HTTP adicionales
       * @example {
       *       "Content-Type": "application/json",
       *       "Authorization": "Bearer token"
       *     }
       */
      headers?: Record<string, never>;
      /**
       * @description Tipo de pool de conexiones
       * @default random
       * @example random
       * @enum {string}
       */
      poolType: "hash" | "random";
      /**
       * @description Número de conexiones para pipelining
       * @default 100
       * @example 100
       */
      enablePipelining: number;
      /**
       * @description Descripción del conector
       * @example Conector para webhooks de notificaciones del proyecto
       */
      description?: string;
      /**
       * @description Etiquetas para categorizar el conector
       * @example [
       *       "webhook",
       *       "notifications",
       *       "production"
       *     ]
       */
      tags?: string[];
      /**
       * @description Metadatos adicionales del conector
       * @example {
       *       "environment": "production",
       *       "version": "1.0"
       *     }
       */
      metadata?: Record<string, never>;
    };
    CreateConnectorResponseDto: {
      /**
       * @description Indica si la creación fue exitosa
       * @example true
       */
      success: boolean;
      /**
       * @description Mensaje descriptivo del resultado
       * @example Conector MQTT creado exitosamente
       */
      message: string;
      /**
       * @description Información del conector creado
       * @example {
       *       "id": "http:webhook-connector-prod",
       *       "name": "webhook-connector-prod",
       *       "type": "http",
       *       "url": "https://api.example.com/webhooks",
       *       "enable": true,
       *       "createdAt": "2024-01-15T10:30:00.000Z"
       *     }
       */
      connector: Record<string, never>;
      /**
       * @description Timestamp de la creación
       * @example 2024-01-15T10:30:00.000Z
       */
      timestamp: string;
    };
    ResourceOptsDto: {
      /**
       * @description Tamaño del pool de workers
       * @default 8
       * @example 8
       */
      workerPoolSize: number;
      /**
       * @description Intervalo de verificación de salud
       * @default 30s
       * @example 30s
       */
      healthCheckInterval: string;
      /**
       * @description Modo de consulta
       * @default async
       * @example async
       * @enum {string}
       */
      queryMode: "async" | "sync";
    };
    CreateActionDto: {
      /**
       * @description Nombre único de la acción
       * @example project-notification-action
       */
      name: string;
      /**
       * @description Tipo de acción
       * @example http
       * @enum {string}
       */
      type: "http";
      /**
       * @description Nombre del conector asociado (solo el nombre, no el ID completo)
       * @example webhook-connector-prod
       */
      connectorId: string;
      /**
       * @description Ruta del endpoint para la acción
       * @example /webhooks/notifications
       */
      path: string;
      /**
       * @description Método HTTP
       * @default post
       * @example post
       * @enum {string}
       */
      method: "post" | "put" | "get" | "delete";
      /**
       * @description Headers HTTP adicionales
       * @example {
       *       "Content-Type": "application/json"
       *     }
       */
      headers?: Record<string, never>;
      /**
       * @description Cuerpo de la petición HTTP
       * @example {"message": "${payload}", "timestamp": "${now_timestamp()}"}
       */
      body?: string;
      /**
       * @description Número máximo de reintentos
       * @default 3
       * @example 3
       */
      maxRetries: number;
      /**
       * @description Tipo de evento para acciones de dominio
       * @example user.created
       */
      eventType?: string;
      /**
       * @description Estado habilitado de la acción
       * @default true
       * @example true
       */
      enable: boolean;
      /**
       * @description Descripción de la acción
       * @example Acción para enviar notificaciones de proyecto
       */
      description?: string;
      /**
       * @description Etiquetas para categorizar la acción
       * @example [
       *       "notification",
       *       "project",
       *       "webhook"
       *     ]
       */
      tags?: string[];
      /** @description Opciones de recursos para la acción */
      resourceOpts?: components["schemas"]["ResourceOptsDto"];
      /**
       * @description Metadatos adicionales de la acción
       * @example {
       *       "priority": "high",
       *       "category": "notifications"
       *     }
       */
      metadata?: Record<string, never>;
    };
    CreateActionResponseDto: {
      /**
       * @description Indica si la creación fue exitosa
       * @example true
       */
      success: boolean;
      /**
       * @description Mensaje descriptivo del resultado
       * @example Acción MQTT creada exitosamente
       */
      message: string;
      /**
       * @description Información de la acción creada
       * @example {
       *       "id": "http:project-notification-action",
       *       "name": "project-notification-action",
       *       "type": "http",
       *       "connectorId": "http:webhook-connector-prod",
       *       "enable": true,
       *       "createdAt": "2024-01-15T10:30:00.000Z"
       *     }
       */
      action: Record<string, never>;
      /**
       * @description Timestamp de la creación
       * @example 2024-01-15T10:30:00.000Z
       */
      timestamp: string;
    };
    CreateRuleDto: {
      /**
       * @description Nombre único de la regla
       * @example project-events-rule
       */
      name: string;
      /**
       * @description Tipo de regla
       * @example project
       * @enum {string}
       */
      type: "project" | "notification" | "alarm" | "domain-event" | "data-saver" | "custom";
      /**
       * @description Consulta SQL para la regla (requerida para tipo 'custom')
       * @example SELECT * FROM "projects/+/events/+" WHERE payload.severity = "HIGH"
       */
      sql?: string;
      /**
       * @description Filtro de tópico MQTT
       * @example projects/+/events/+
       */
      topicFilter?: string;
      /**
       * @description Condición adicional para la regla
       * @example payload.severity = 'HIGH'
       */
      condition?: string;
      /**
       * @description Filtro de datos específico
       * @example payload.projectId
       */
      dataFilter?: string;
      /**
       * @description Tipo de evento para reglas de dominio
       * @example project.status.changed
       */
      eventType?: string;
      /**
       * @description Nombres de las acciones a ejecutar (se convertirán automáticamente al formato http:action_name)
       * @example [
       *       "project-notification-action",
       *       "alert-action"
       *     ]
       */
      actions: string[];
      /**
       * @description Estado habilitado de la regla
       * @default true
       * @example true
       */
      enable: boolean;
      /**
       * @description Descripción de la regla
       * @example Regla para procesar eventos de proyecto con alta severidad
       */
      description?: string;
      /**
       * @description Metadatos adicionales de la regla
       * @example {
       *       "priority": "high",
       *       "category": "project-events"
       *     }
       */
      metadata?: Record<string, never>;
    };
    CreateRuleResponseDto: {
      /**
       * @description Indica si la creación fue exitosa
       * @example true
       */
      success: boolean;
      /**
       * @description Mensaje descriptivo del resultado
       * @example Regla MQTT creada exitosamente
       */
      message: string;
      /**
       * @description Información de la regla creada
       * @example {
       *       "id": "project-events-rule",
       *       "name": "project-events-rule",
       *       "type": "project",
       *       "sql": "SELECT * FROM \"projects/+/events/+\" WHERE payload.severity = \"HIGH\"",
       *       "actions": [
       *         "http:project-notification-action"
       *       ],
       *       "enable": true,
       *       "createdAt": "2024-01-15T10:30:00.000Z"
       *     }
       */
      rule: Record<string, never>;
      /**
       * @description Timestamp de la creación
       * @example 2024-01-15T10:30:00.000Z
       */
      timestamp: string;
    };
    RoleResponseDto: {
      /**
       * @description ID del rol
       * @example role-123
       */
      id: string;
      /**
       * @description Nombre del rol
       * @example MANAGEMENT
       */
      name: string;
      /**
       * @description Descripción del rol
       * @example Gestión - Acceso total al sistema
       */
      description?: string;
      /**
       * @description Si es un rol del sistema (no eliminable)
       * @example false
       */
      isSystem: boolean;
      /**
       * @description Si el rol está activo
       * @example true
       */
      isActive: boolean;
      /**
       * @description Permisos del rol
       * @example [
       *       {
       *         "resource": "users",
       *         "action": "read"
       *       },
       *       {
       *         "resource": "projects",
       *         "action": "manage"
       *       }
       *     ]
       */
      permissions: {
        name?: string;
        resource?: string;
        action?: string;
      }[];
      /**
       * Format: date-time
       * @description Fecha de creación
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
    };
    UserResponseDto: {
      /**
       * @description Identificador único de la entidad
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Indica si la entidad está activa
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación de la entidad
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de última actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /**
       * @description Fecha de eliminación (soft delete)
       * @example null
       */
      deletedAt?: Record<string, never> | null;
      /**
       * @description Nombre del usuario
       * @example Juan
       */
      name: string;
      /**
       * @description Apellido del usuario
       * @example Pérez
       */
      lastName: string;
      /**
       * @description Email del usuario
       * @example juan@ejemplo.com
       */
      email: string;
      /** @description Rol asignado al usuario */
      role?: components["schemas"]["RoleResponseDto"];
      /**
       * @description Si el email está verificado
       * @example true
       */
      emailVerified: boolean;
    };
    ErrorResponse: {
      /**
       * @description Unique identifier for the error instance
       * @example ERR_001_20231201_143022
       */
      id: string;
      /**
       * @description User-friendly error message
       * @example El recurso solicitado no fue encontrado
       */
      message: string;
      /**
       * @description Detailed error description for developers
       * @example Usuario con ID 123 no existe en la base de datos
       */
      userMessage?: string;
      /**
       * @description Error category classification
       * @example VALIDATION_ERROR
       */
      category: string;
      /**
       * @description Error severity level
       * @example MEDIUM
       * @enum {string}
       */
      severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
      /**
       * @description HTTP status code
       * @example 404
       */
      statusCode: number;
      /**
       * @description ISO 8601 timestamp when the error occurred
       * @example 2023-12-01T14:30:22.123Z
       */
      timestamp: string;
      /**
       * @description Request path where the error occurred
       * @example /api/v1/users/123
       */
      path: string;
      /**
       * @description HTTP method used in the request
       * @example GET
       * @enum {string}
       */
      method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "HEAD";
      /**
       * @description Technical error details (only available in development environment)
       * @example Database connection timeout after 5000ms
       */
      technicalDetails?: Record<string, never>;
      /**
       * @description Error stack trace (only available in development environment)
       * @example Error: Connection timeout
       *         at Database.connect (/app/db.js:42:15)
       */
      stack?: Record<string, never>;
    };
    BaseErrorResponse: {
      /**
       * @description Indicates whether the request was successful or not
       * @example false
       */
      success: boolean;
      /** @description Error details */
      error: components["schemas"]["ErrorResponse"];
    };
    PaginationMetadataDto: {
      /**
       * @description Número total de elementos
       * @example 150
       */
      total: number;
      /**
       * @description Página actual
       * @example 1
       */
      page: number;
      /**
       * @description Elementos por página
       * @example 10
       */
      pageSize: number;
      /**
       * @description Número total de páginas
       * @example 15
       */
      totalPages: number;
      /**
       * @description Si hay página siguiente
       * @example true
       */
      hasNext: boolean;
      /**
       * @description Si hay página anterior
       * @example false
       */
      hasPrevious: boolean;
    };
    PaginatedUserResponseDto: {
      /** @description Lista de usuarios paginados */
      data: components["schemas"]["UserResponseDto"][];
      /** @description Metadatos de paginación */
      meta: components["schemas"]["PaginationMetadataDto"];
    };
    CreateUserRequestDto: {
      /**
       * @description Nombre del usuario
       * @example Juan
       */
      name: string;
      /**
       * @description Apellido del usuario
       * @example Pérez
       */
      lastName: string;
      /**
       * Format: email
       * @description Email del usuario
       * @example juan@ejemplo.com
       */
      email: string;
      /**
       * @description Contraseña del usuario (opcional, se genera automáticamente si no se proporciona)
       * @example MiContraseña123!
       */
      password?: string;
      /**
       * @description ID del rol a asignar al usuario
       * @example role-123
       */
      roleId: string;
    };
    UpdateUserRequestDto: {
      /**
       * @description Nombre del usuario
       * @example Juan Carlos
       */
      name?: string;
      /**
       * @description Apellido del usuario
       * @example Pérez García
       */
      lastName?: string;
      /**
       * @description ID del rol a asignar al usuario
       * @example role-456
       */
      roleId?: string;
    };
    ChangePasswordRequestDto: {
      /**
       * @description Nueva contraseña del usuario
       * @example NuevaContraseña123!
       */
      newPassword: string;
      /**
       * @description Confirmación de la nueva contraseña
       * @example NuevaContraseña123!
       */
      confirmPassword: string;
    };
    SignInDto: {
      /**
       * @description Email del usuario
       * @example usuario@ejemplo.com
       */
      email: string;
      /**
       * @description Contraseña del usuario
       * @example miContraseña123
       */
      password: string;
    };
    UserProfileDto: {
      /**
       * @description Identificador único de la entidad
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Indica si la entidad está activa
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación de la entidad
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de última actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /**
       * @description Fecha de eliminación (soft delete)
       * @example null
       */
      deletedAt?: Record<string, never> | null;
      /**
       * @description Nombre del usuario
       * @example Juan
       */
      name: string;
      /**
       * @description Apellido del usuario
       * @example Pérez
       */
      lastName: string;
      /**
       * @description Email del usuario
       * @example juan@ejemplo.com
       */
      email: string;
      /**
       * @description Nombre del rol asignado
       * @example MANAGEMENT
       */
      roleName?: string;
    };
    UpdateProfileDto: {
      /**
       * @description Nombre del usuario
       * @example Juan Carlos
       */
      name?: string;
      /**
       * @description Apellido del usuario
       * @example Pérez García
       */
      lastName?: string;
    };
    UpdatePasswordDto: {
      /**
       * @description Contraseña actual del usuario
       * @example ContraseñaActual123!
       */
      currentPassword: string;
      /**
       * @description Nueva contraseña del usuario
       * @example NuevaContraseña123!
       */
      password: string;
      /**
       * @description Confirmación de la nueva contraseña
       * @example NuevaContraseña123!
       */
      confirmPassword: string;
    };
    MqttCredentialsResponseDto: {
      /**
       * @description URL del broker MQTT con protocolo WebSocket
       * @example ws://localhost:8083/mqtt
       */
      brokerUrl: string;
      /**
       * @description Usuario para autenticación MQTT
       * @example user_mqtt_2024
       */
      username: string;
      /**
       * @description Contraseña para autenticación MQTT
       * @example mqtt_secure_password_123
       */
      password: string;
      /**
       * @description ID único del cliente MQTT (opcional)
       * @example web-client-user-123
       */
      clientId?: string;
    };
    ClientContactRequestDto: {
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      /**
       * @description Teléfono del contacto
       * @example +51987654321
       */
      phone: string;
      /**
       * Format: email
       * @description Email del contacto
       * @example maria@empresa.com
       */
      email: string;
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive?: boolean;
    };
    ClientAddressRequestDto: {
      /**
       * @description Dirección del cliente
       * @example Av. Principal 123
       */
      address: string;
      /**
       * @description Referencia de la dirección
       * @example Frente al parque
       */
      reference?: string;
      /**
       * @description Si la dirección está activa
       * @example true
       */
      isActive?: boolean;
    };
    ClientSunatInfoRequestDto: {
      /**
       * @description Dirección fiscal
       * @example Av. Principal 123
       */
      address: string;
      /**
       * @description Dirección completa
       * @example Av. Principal 123, Lima, Lima
       */
      fullAddress: string;
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      businessName: string;
      /**
       * @description Estado SUNAT
       * @example ACTIVO
       * @enum {string}
       */
      state:
        | "ACTIVO"
        | "BAJA_PROVISIONAL"
        | "BAJA_DEFINITIVA"
        | "SUSPENSION_TEMPORAL"
        | "BAJA_PROV_POR_OFICIO"
        | "BAJA_DEFI_POR_OFICIO"
        | "OTRO";
      /**
       * @description Condición SUNAT
       * @example HABIDO
       * @enum {string}
       */
      condition: "HABIDO" | "NO_HABIDO" | "NO_HALLADO" | "PENDIENTE" | "OTRO";
      /**
       * @description Departamento
       * @example LIMA
       */
      department: string;
      /**
       * @description Provincia
       * @example LIMA
       */
      province: string;
      /**
       * @description Distrito
       * @example SAN ISIDRO
       */
      district: string;
    };
    CreateClientRequestDto: {
      /**
       * @description RUC del cliente
       * @example 20123456789
       */
      ruc: string;
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      name: string;
      /**
       * Format: email
       * @description Email del cliente
       * @example contacto@empresa.com
       */
      email: string;
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative: string;
      /**
       * @description Si el cliente está activo
       * @example true
       */
      isActive?: boolean;
      /** @description Contactos del cliente */
      contacts?: components["schemas"]["ClientContactRequestDto"][];
      /** @description Direcciones del cliente */
      addresses?: components["schemas"]["ClientAddressRequestDto"][];
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoRequestDto"];
    };
    RucVO: {
      /** @example 20454777621 */
      value: string;
    };
    EmailVO: {
      /** @example contacto@empresa.com */
      value: string;
      /** @example empresa.com */
      domain: string;
      /** @example contacto */
      localPart: string;
    };
    PhoneVO: {
      /** @example +51987654321 */
      value: string;
    };
    ClientContactResponseDto: {
      /**
       * @description ID del contacto
       * @example contact-123
       */
      id: string;
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      _phone: components["schemas"]["PhoneVO"];
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive: boolean;
    };
    ClientAddressResponseDto: {
      /**
       * @description ID de la dirección
       * @example address-123
       */
      id: string;
      /**
       * @description Dirección del cliente
       * @example Av. Principal 123
       */
      address: string;
      /**
       * @description Referencia de la dirección
       * @example Frente al parque
       */
      reference?: string;
      /**
       * @description Si la dirección está activa
       * @example true
       */
      isActive: boolean;
    };
    ClientSunatInfoResponseDto: {
      /**
       * @description Dirección fiscal
       * @example Av. Principal 123
       */
      address: string;
      /**
       * @description Dirección completa
       * @example Av. Principal 123, Lima, Lima
       */
      fullAddress: string;
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      businessName: string;
      /**
       * @description Estado SUNAT
       * @example ACTIVO
       * @enum {string}
       */
      state:
        | "ACTIVO"
        | "BAJA_PROVISIONAL"
        | "BAJA_DEFINITIVA"
        | "SUSPENSION_TEMPORAL"
        | "BAJA_PROV_POR_OFICIO"
        | "BAJA_DEFI_POR_OFICIO"
        | "OTRO";
      /**
       * @description Condición SUNAT
       * @example HABIDO
       * @enum {string}
       */
      condition: "HABIDO" | "NO_HABIDO" | "NO_HALLADO" | "PENDIENTE" | "OTRO";
      /**
       * @description Departamento
       * @example LIMA
       */
      department: string;
      /**
       * @description Provincia
       * @example LIMA
       */
      province: string;
      /**
       * @description Distrito
       * @example SAN ISIDRO
       */
      district: string;
    };
    ClientOperationResponseDto: {
      /**
       * @description ID del cliente
       * @example client-123
       */
      id: string;
      _ruc: components["schemas"]["RucVO"];
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      name: string;
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative: string;
      /**
       * @description Si el cliente está activo
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /** @description Contactos del cliente */
      contacts?: components["schemas"]["ClientContactResponseDto"][];
      /** @description Direcciones del cliente */
      addresses?: components["schemas"]["ClientAddressResponseDto"][];
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoResponseDto"];
    };
    UpdateClientRequestDto: {
      /**
       * @description RUC del cliente
       * @example 20123456789
       */
      ruc: string;
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      name?: string;
      /**
       * Format: email
       * @description Email del cliente
       * @example contacto@empresa.com
       */
      email?: string;
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative?: string;
      /**
       * @description Si el cliente está activo
       * @example true
       */
      isActive?: boolean;
      /** @description Contactos del cliente */
      contacts?: components["schemas"]["ClientContactRequestDto"][];
      /** @description Direcciones del cliente */
      addresses?: components["schemas"]["ClientAddressRequestDto"][];
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoRequestDto"];
    };
    ClientProfileResponseDto: {
      /**
       * @description ID del cliente
       * @example client-123
       */
      id: string;
      _ruc: components["schemas"]["RucVO"];
      /**
       * @description Razón social
       * @example EMPRESA S.A.C.
       */
      name: string;
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative: string;
      /**
       * @description Si el cliente está activo
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /** @description Contactos del cliente */
      contacts?: components["schemas"]["ClientContactResponseDto"][];
      /** @description Direcciones del cliente */
      addresses?: components["schemas"]["ClientAddressResponseDto"][];
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoResponseDto"];
    };
    PaginatedClientResponseDto: {
      /** @description Lista de clientes paginados */
      data: components["schemas"]["ClientProfileResponseDto"][];
      /** @description Metadatos de paginación */
      meta: components["schemas"]["PaginationMetadataDto"];
    };
    ClientSunatFullInfoResponseDto: {
      /** @description Información SUNAT del cliente */
      sunatInfo?: components["schemas"]["ClientSunatInfoResponseDto"];
      /**
       * @description Representante legal
       * @example Juan Pérez
       */
      legalRepresentative?: string;
    };
    AddContactRequestDto: {
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      /**
       * @description Teléfono del contacto
       * @example +51987654321
       */
      phone: string;
      /**
       * Format: email
       * @description Email del contacto
       * @example maria@empresa.com
       */
      email: string;
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive?: boolean;
    };
    ClientContactOperationResponseDto: {
      /**
       * @description ID del contacto
       * @example contact-123
       */
      id: string;
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      _phone: components["schemas"]["PhoneVO"];
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive: boolean;
    };
    UpdateContactRequestDto: {
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name?: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position?: string;
      /**
       * @description Teléfono del contacto
       * @example +51987654321
       */
      phone?: string;
      /**
       * @description Email del contacto
       * @example maria@empresa.com
       */
      email?: string;
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive?: boolean;
    };
    ClientContactToggleActiveResponseDto: {
      /**
       * @description ID del contacto
       * @example contact-123
       */
      id: string;
      /**
       * @description Nombre del contacto
       * @example María López
       */
      name: string;
      /**
       * @description Cargo del contacto
       * @example Gerente Comercial
       */
      position: string;
      _phone: components["schemas"]["PhoneVO"];
      _email: components["schemas"]["EmailVO"];
      /**
       * @description Si el contacto está activo
       * @example true
       */
      isActive: boolean;
    };
    AddAddressRequestDto: {
      /**
       * @description Dirección del cliente
       * @example Av. Principal 123
       */
      address: string;
      /**
       * @description Referencia de la dirección
       * @example Frente al parque
       */
      reference?: string;
      /**
       * @description Si la dirección está activa
       * @example true
       */
      isActive?: boolean;
    };
    ClientAddressOperationResponseDto: {
      /**
       * @description ID de la dirección
       * @example address-123
       */
      id: string;
      /**
       * @description Dirección del cliente
       * @example Av. Principal 123
       */
      address: string;
      /**
       * @description Referencia de la dirección
       * @example Frente al parque
       */
      reference?: string;
      /**
       * @description Si la dirección está activa
       * @example true
       */
      isActive: boolean;
    };
    UpdateAddressRequestDto: {
      /**
       * @description Dirección del cliente
       * @example Av. Principal 123
       */
      address?: string;
      /**
       * @description Referencia de la dirección
       * @example Frente al parque
       */
      reference?: string;
      /**
       * @description Si la dirección está activa
       * @example true
       */
      isActive?: boolean;
    };
    ClientAddressToggleActiveResponseDto: {
      /**
       * @description ID de la dirección
       * @example address-123
       */
      id: string;
      /**
       * @description Dirección del cliente
       * @example Av. Principal 123
       */
      address: string;
      /**
       * @description Referencia de la dirección
       * @example Frente al parque
       */
      reference?: string;
      /**
       * @description Si la dirección está activa
       * @example true
       */
      isActive: boolean;
    };
    RoleListItemDto: {
      /**
       * @description Identificador único de la entidad
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Indica si la entidad está activa
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación de la entidad
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de última actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /**
       * @description Fecha de eliminación (soft delete)
       * @example null
       */
      deletedAt?: Record<string, never> | null;
      /**
       * @description Nombre del rol
       * @example CUSTOM_MANAGER
       */
      name: string;
      /**
       * @description Descripción del rol
       * @example Gestor personalizado con permisos específicos
       */
      description: string;
      /**
       * @description Número de permisos asignados
       * @example 8
       */
      permissionCount: number;
      /**
       * @description Indica si es un rol del sistema (no modificable)
       * @example false
       */
      isSystem: boolean;
      /**
       * @description Número de usuarios que tienen asignado este rol
       * @example 5
       */
      userCount?: number;
    };
    PaginatedRoleResponseDto: {
      /** @description Lista de roles paginados */
      data: components["schemas"]["RoleListItemDto"][];
      /** @description Metadatos de paginación */
      meta: components["schemas"]["PaginationMetadataDto"];
    };
    PermissionRequestDto: {
      /**
       * @description Recurso del sistema al que aplica el permiso
       * @example users
       * @enum {string}
       */
      resource:
        | "users"
        | "projects"
        | "clients"
        | "milestones"
        | "phases"
        | "deliverables"
        | "activities"
        | "roles"
        | "notifications"
        | "reports"
        | "dashboard"
        | "system";
      /**
       * @description Acción que se puede realizar sobre el recurso
       * @example read
       * @enum {string}
       */
      action: "read" | "write" | "manage";
    };
    CreateRoleRequestDto: {
      /**
       * @description Nombre del rol
       * @example CUSTOM_MANAGER
       */
      name: string;
      /**
       * @description Descripción del rol
       * @example Gestor personalizado con permisos específicos para el área comercial
       */
      description: string;
      /**
       * @description Lista de permisos del rol
       * @example [
       *       {
       *         "resource": "users",
       *         "action": "read"
       *       },
       *       {
       *         "resource": "projects",
       *         "action": "manage"
       *       },
       *       {
       *         "resource": "clients",
       *         "action": "write"
       *       }
       *     ]
       */
      permissions: components["schemas"]["PermissionRequestDto"][];
    };
    PermissionResponseDto: {
      /**
       * @description Nombre del permiso en formato 'recurso:acción'
       * @example users:read
       */
      name: string;
      /**
       * @description Recurso del sistema al que aplica el permiso
       * @example users
       */
      resource: string;
      /**
       * @description Acción que se puede realizar sobre el recurso
       * @example read
       * @enum {string}
       */
      action: "read" | "write" | "manage";
    };
    RoleDetailResponseDto: {
      /**
       * @description Identificador único de la entidad
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Indica si la entidad está activa
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación de la entidad
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de última actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /**
       * @description Fecha de eliminación (soft delete)
       * @example null
       */
      deletedAt?: Record<string, never> | null;
      /**
       * @description Nombre del rol
       * @example CUSTOM_MANAGER
       */
      name: string;
      /**
       * @description Descripción del rol
       * @example Gestor personalizado con permisos específicos para el área comercial
       */
      description: string;
      /**
       * @description Lista de permisos del rol
       * @example [
       *       {
       *         "name": "users:read",
       *         "resource": "users",
       *         "action": "read"
       *       },
       *       {
       *         "name": "projects:manage",
       *         "resource": "projects",
       *         "action": "manage"
       *       },
       *       {
       *         "name": "clients:write",
       *         "resource": "clients",
       *         "action": "write"
       *       }
       *     ]
       */
      permissions: components["schemas"]["PermissionResponseDto"][];
      /**
       * @description Indica si es un rol del sistema (no modificable)
       * @example false
       */
      isSystem: boolean;
      /**
       * @description Número de usuarios que tienen asignado este rol
       * @example 5
       */
      userCount?: number;
    };
    RoleOperationResponseDto: {
      /**
       * @description Indica si la operación fue exitosa
       * @example true
       */
      success: boolean;
      /**
       * @description Mensaje descriptivo del resultado
       * @example Rol creado exitosamente
       */
      message: string;
      /** @description Datos del rol afectado */
      data: components["schemas"]["RoleDetailResponseDto"];
      /**
       * @description Número de usuarios afectados por la operación (para actualizaciones)
       * @example 3
       */
      affectedUsers?: number;
    };
    UpdateRoleRequestDto: {
      /**
       * @description Nombre del rol
       * @example CUSTOM_MANAGER_UPDATED
       */
      name?: string;
      /**
       * @description Descripción del rol
       * @example Gestor personalizado actualizado con nuevos permisos
       */
      description?: string;
      /**
       * @description Lista de permisos del rol
       * @example [
       *       {
       *         "resource": "users",
       *         "action": "read"
       *       },
       *       {
       *         "resource": "projects",
       *         "action": "manage"
       *       },
       *       {
       *         "resource": "reports",
       *         "action": "read"
       *       }
       *     ]
       */
      permissions?: components["schemas"]["PermissionRequestDto"][];
    };
    AvailablePermissionsResponseDto: {
      /**
       * @description Lista de recursos disponibles en el sistema
       * @example [
       *       "users",
       *       "projects",
       *       "clients",
       *       "milestones",
       *       "phases",
       *       "deliverables",
       *       "activities",
       *       "roles",
       *       "notifications",
       *       "reports",
       *       "dashboard",
       *       "system"
       *     ]
       */
      resources: string[];
      /**
       * @description Lista de acciones disponibles (simplificadas)
       * @example [
       *       "read",
       *       "write",
       *       "manage"
       *     ]
       */
      actions: string[];
      /**
       * @description Lista de todas las combinaciones válidas de permisos
       * @example [
       *       "users:read",
       *       "users:write",
       *       "users:manage",
       *       "projects:read",
       *       "projects:write",
       *       "projects:manage",
       *       "clients:read",
       *       "clients:write",
       *       "clients:manage"
       *     ]
       */
      combinations: string[];
    };
    MilestoneTemplateRefRequestDto: {
      /**
       * @description ID único del hito de plantilla
       * @example milestone-uuid-123
       */
      milestoneTemplateId: string;
      /**
       * @description Indica si el hito es requerido
       * @default false
       * @example true
       */
      isRequired: boolean;
      /**
       * @description Nombre personalizado del hito
       * @example Hito personalizado
       */
      customName?: string;
      /**
       * @description Customizaciones del hito (objeto JSON)
       * @example {
       *       "campo": "valor"
       *     }
       */
      customizations?: Record<string, never>;
    };
    CreateProjectTemplateRequestDto: {
      /**
       * @description Nombre de la plantilla de proyecto
       * @example Plantilla Estándar
       */
      name: string;
      /**
       * @description Descripción de la plantilla
       * @example Plantilla para proyectos estándar
       */
      description?: string;
      /**
       * @description Indica si la plantilla está activa
       * @default true
       * @example true
       */
      isActive: boolean;
      /**
       * @description Lista de hitos de la plantilla
       * @example [
       *       {
       *         "milestoneTemplateId": "milestone-uuid-123",
       *         "isRequired": true,
       *         "customName": "Inicio",
       *         "customizations": {
       *           "campo": "valor"
       *         }
       *       }
       *     ]
       */
      milestones?: components["schemas"]["MilestoneTemplateRefRequestDto"][];
      /**
       * @description IDs de etiquetas asociadas
       * @example [
       *       "tagid1",
       *       "tagid2"
       *     ]
       */
      tagIds?: string[];
    };
    MilestoneTemplateRefResponseDto: {
      /**
       * @description ID único del hito
       * @example milestone-uuid-123
       */
      milestoneTemplateId: string;
      /**
       * @description Si el hito es requerido
       * @example true
       */
      isRequired?: boolean;
      /**
       * @description Nombre personalizado del hito
       * @example Inicio
       */
      customName?: string;
      /**
       * @description Customizaciones del hito (objeto JSON)
       * @example {
       *       "campo": "valor"
       *     }
       */
      customizations?: Record<string, never>;
    };
    TagResponseDto: {
      /**
       * @description ID único de la etiqueta
       * @example tag-uuid-123
       */
      id: string;
      /**
       * @description Nombre de la etiqueta
       * @example Urgente
       */
      name: string;
      /**
       * @description Color hexadecimal de la etiqueta
       * @example #FF0000
       */
      color?: string;
      /**
       * @description Indica si la etiqueta está activa
       * @example true
       */
      isActive: boolean;
    };
    ProjectTemplateResponseDto: {
      /**
       * @description ID de la plantilla
       * @example template-uuid-123
       */
      id: string;
      /**
       * @description Nombre de la plantilla
       * @example Plantilla Estándar
       */
      name: string;
      /**
       * @description Descripción de la plantilla
       * @example Plantilla para proyectos estándar
       */
      description?: string;
      /**
       * @description Si la plantilla está activa
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /**
       * @description Fecha de eliminación
       * @example 2024-02-01T10:30:00.000Z
       */
      deletedAt?: Record<string, never>;
      /** @description Lista de hitos de la plantilla */
      milestones?: components["schemas"]["MilestoneTemplateRefResponseDto"][];
      /** @description Lista de etiquetas de la plantilla */
      tags?: components["schemas"]["TagResponseDto"][];
      /**
       * @description IDs de etiquetas asociadas
       * @example [
       *       "tagid1",
       *       "tagid2"
       *     ]
       */
      tagIds?: string[];
    };
    UpdateProjectTemplateRequestDto: {
      /**
       * @description Nombre de la plantilla de proyecto
       * @example Plantilla Estándar
       */
      name?: string;
      /**
       * @description Descripción de la plantilla
       * @example Plantilla para proyectos estándar
       */
      description?: string;
      /**
       * @description Indica si la plantilla está activa
       * @default true
       * @example true
       */
      isActive: boolean;
      /**
       * @description Lista de hitos de la plantilla
       * @example [
       *       {
       *         "milestoneTemplateId": "milestone-uuid-123",
       *         "isRequired": true,
       *         "customName": "Inicio",
       *         "customizations": {
       *           "campo": "valor"
       *         }
       *       }
       *     ]
       */
      milestones?: components["schemas"]["MilestoneTemplateRefRequestDto"][];
      /**
       * @description IDs de etiquetas asociadas
       * @example [
       *       "tagid1",
       *       "tagid2"
       *     ]
       */
      tagIds?: string[];
    };
    PaginatedProjectTemplateResponseDto: {
      /** @description Lista de plantillas de proyecto paginadas */
      data: components["schemas"]["ProjectTemplateResponseDto"][];
      /** @description Metadatos de paginación */
      meta: components["schemas"]["PaginationMetadataDto"];
    };
    DeliverablePrecedenceResponseDto: {
      /**
       * @description ID único del entregable del cual depende este entregable.
       * @example deliverable-uuid-456
       */
      deliverableId: string;
    };
    DeliverableTemplateResponseDto: {
      /**
       * @description ID único del entregable
       * @example deliverable-uuid-123
       */
      id: string;
      /**
       * @description Nombre del entregable
       * @example Documento final
       */
      name: string;
      /**
       * @description Descripción del entregable
       * @example Debe entregarse firmado por el cliente.
       */
      description?: string;
      /**
       * @description Prioridad del entregable
       * @example HIGH
       * @enum {string}
       */
      priority: "HIGH" | "MEDIUM" | "LOW";
      /**
       * @description Lista de precedencias de este entregable (dependencias)
       * @example [
       *       {
       *         "deliverableId": "deliverable-uuid-456"
       *       }
       *     ]
       */
      precedence?: components["schemas"]["DeliverablePrecedenceResponseDto"][];
    };
    PhaseTemplateResponseDto: {
      /**
       * @description ID único de la fase
       * @example phase-uuid-123
       */
      id: string;
      /**
       * @description Nombre de la fase
       * @example Planeación
       */
      name: string;
      /**
       * @description Descripción de la fase
       * @example Fase inicial donde se planifican los entregables y actividades.
       */
      description?: string;
      /** @description Lista de entregables asociados a la fase */
      deliverables?: components["schemas"]["DeliverableTemplateResponseDto"][];
    };
    MilestoneTemplateResponseDto: {
      /**
       * @description ID único de la plantilla de hito
       * @example milestone-template-uuid-123
       */
      id: string;
      /**
       * @description Nombre de la plantilla de hito
       * @example Hito Estándar
       */
      name: string;
      /**
       * @description Descripción de la plantilla de hito
       * @example Plantilla para hitos estándar de proyectos de consultoría.
       */
      description?: string;
      /**
       * @description Indica si la plantilla está activa
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación de la plantilla
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de última actualización de la plantilla
       * @example 2024-01-20T12:00:00.000Z
       */
      updatedAt: string;
      /**
       * @description Fecha de eliminación lógica (si aplica)
       * @example 2024-02-01T10:30:00.000Z
       */
      deletedAt?: Record<string, never>;
      /** @description Lista de fases que componen la plantilla de hito */
      phases?: components["schemas"]["PhaseTemplateResponseDto"][];
    };
    ProjectTemplateDetailedResponseDto: {
      /**
       * @description ID de la plantilla
       * @example template-uuid-123
       */
      id: string;
      /**
       * @description Nombre de la plantilla
       * @example Plantilla Estándar
       */
      name: string;
      /**
       * @description Descripción de la plantilla
       * @example Plantilla para proyectos estándar
       */
      description?: string;
      /**
       * @description Si la plantilla está activa
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Fecha de creación
       * @example 2024-01-15T10:30:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Fecha de actualización
       * @example 2024-01-15T10:30:00.000Z
       */
      updatedAt: string;
      /**
       * @description Fecha de eliminación
       * @example 2024-02-01T10:30:00.000Z
       */
      deletedAt?: Record<string, never>;
      /** @description Lista de hitos de la plantilla con referencias */
      milestones?: components["schemas"]["MilestoneTemplateRefResponseDto"][];
      /** @description Lista de milestone templates completos expandidos */
      milestoneTemplates?: components["schemas"]["MilestoneTemplateResponseDto"][];
      /** @description Lista de etiquetas de la plantilla */
      tags?: components["schemas"]["TagResponseDto"][];
      /**
       * @description IDs de etiquetas asociadas
       * @example [
       *       "tagid1",
       *       "tagid2"
       *     ]
       */
      tagIds?: string[];
    };
    CreateTagRequestDto: {
      /**
       * @description Nombre de la etiqueta
       * @example Urgente
       */
      name: string;
      /**
       * @description Color hexadecimal de la etiqueta
       * @example #FF0000
       */
      color?: string;
      /**
       * @description Indica si la etiqueta está activa
       * @default true
       * @example true
       */
      isActive: boolean;
    };
    UpdateTagRequestDto: {
      /**
       * @description Nombre de la etiqueta
       * @example Urgente
       */
      name?: string;
      /**
       * @description Color hexadecimal de la etiqueta
       * @example #FF0000
       */
      color?: string;
      /**
       * @description Indica si la etiqueta está activa
       * @default true
       * @example true
       */
      isActive: boolean;
    };
    DeliverablePrecedenceRequestDto: {
      /**
       * @description ID único del entregable del cual depende este entregable. Permite definir precedencias entre entregables dentro de la misma fase.
       * @example deliverable-uuid-123
       */
      deliverableId: string;
    };
    DeliverableTemplateRequestDto: {
      /**
       * @description Nombre único y descriptivo del entregable dentro de la fase.
       *     Debe ser claro y no repetirse en otros entregables de la misma fase.
       * @example Documento final
       */
      name: string;
      /**
       * @description Descripción opcional del entregable, detallando su contenido o requisitos.
       * @example Debe entregarse firmado por el cliente.
       */
      description?: string;
      /**
       * @description Prioridad del entregable según su importancia o urgencia.
       * @example HIGH
       * @enum {string}
       */
      priority: "HIGH" | "MEDIUM" | "LOW";
      /**
       * @description Lista de precedencias de este entregable.
       *     Permite definir dependencias con otros entregables de la misma fase.
       *     Por ejemplo, un entregable puede requerir que otro entregable esté completado antes.
       * @example [
       *       {
       *         "deliverableId": "deliverable-uuid-456"
       *       },
       *       {
       *         "deliverableId": "deliverable-uuid-789"
       *       }
       *     ]
       */
      precedence?: components["schemas"]["DeliverablePrecedenceRequestDto"][];
    };
    PhaseTemplateRequestDto: {
      /**
       * @description Nombre único y descriptivo de la fase dentro de la plantilla de hito.
       *     Debe ser claro y no repetirse en otras fases de la misma plantilla.
       * @example Planeación
       */
      name: string;
      /**
       * @description Descripción opcional de la fase, explicando su propósito o actividades principales.
       * @example Fase inicial donde se planifican los entregables y actividades.
       */
      description?: string;
      /**
       * @description Lista de entregables asociados a la fase.
       *     Cada entregable debe tener un nombre, orden y prioridad únicos dentro de la fase.
       *     Puedes incluir el campo "id" para actualizar un entregable existente.
       * @example [
       *       {
       *         "id": "deliverable-uuid-123",
       *         "name": "Documento final",
       *         "priority": "HIGH",
       *         "description": "Documento firmado por el cliente.",
       *         "precedence": [
       *           {
       *             "deliverableId": "deliverable-uuid-456"
       *           }
       *         ]
       *       },
       *       {
       *         "id": "deliverable-uuid-456",
       *         "name": "Checklist de inicio",
       *         "priority": "MEDIUM",
       *         "description": "Lista de verificación para el arranque."
       *       }
       *     ]
       */
      deliverables?: components["schemas"]["DeliverableTemplateRequestDto"][];
    };
    CreateMilestoneTemplateRequestDto: {
      /**
       * @description Nombre único y descriptivo de la plantilla de hito. Debe ser claro para identificar el propósito de la plantilla.
       * @example Hito Estándar
       */
      name: string;
      /**
       * @description Descripción opcional que explique el objetivo o uso de la plantilla de hito.
       * @example Plantilla para hitos estándar de proyectos de consultoría.
       */
      description?: string;
      /**
       * @description Indica si la plantilla está activa y disponible para ser usada en nuevos proyectos.
       * @default true
       * @example true
       */
      isActive: boolean;
      /**
       * @description Lista de fases que componen la plantilla de hito. Cada fase puede tener entregables asociados.
       *     - El orden de las fases debe ser único y seguir el formato "1.1", "2.1", etc.
       *     - El nombre de cada fase debe ser único dentro de la plantilla.
       * @example [
       *       {
       *         "name": "Planeación",
       *         "description": "Fase de planeación inicial del proyecto.",
       *         "deliverables": [
       *           {
       *             "name": "Documento final",
       *             "priority": "HIGH",
       *             "description": "Documento firmado por el cliente.",
       *             "precedence": [
       *               {
       *                 "deliverableId": "deliverable-uuid-456"
       *               }
       *             ]
       *           },
       *           {
       *             "name": "Checklist de inicio",
       *             "priority": "MEDIUM",
       *             "description": "Lista de verificación para el arranque."
       *           }
       *         ]
       *       },
       *       {
       *         "name": "Ejecución",
       *         "description": "Fase de ejecución de actividades.",
       *         "deliverables": [
       *           {
       *             "name": "Reporte de avance",
       *             "priority": "MEDIUM",
       *             "description": "Reporte semanal de avance."
       *           }
       *         ]
       *       }
       *     ]
       */
      phases?: components["schemas"]["PhaseTemplateRequestDto"][];
    };
    UpdateMilestoneTemplateRequestDto: {
      /**
       * @description Nombre único y descriptivo de la plantilla de hito. Debe ser claro para identificar el propósito de la plantilla.
       * @example Hito Estándar Actualizado
       */
      name?: string;
      /**
       * @description Descripción opcional que explique el objetivo o uso de la plantilla de hito.
       * @example Plantilla actualizada para hitos estándar de proyectos de consultoría.
       */
      description?: string;
      /**
       * @description Indica si la plantilla está activa y disponible para ser usada en nuevos proyectos.
       * @default true
       * @example false
       */
      isActive: boolean;
      /**
       * @description Lista de fases que componen la plantilla de hito. Cada fase puede tener entregables asociados.
       *     - El orden de las fases debe ser único y seguir el formato "1.1", "2.1", etc.
       *     - El nombre de cada fase debe ser único dentro de la plantilla.
       *     - Para actualizar una fase o entregable, incluye su ID.
       * @example [
       *       {
       *         "id": "phase-uuid-123",
       *         "name": "Planeación",
       *         "description": "Fase de planeación inicial del proyecto.",
       *         "deliverables": [
       *           {
       *             "id": "deliverable-uuid-123",
       *             "name": "Documento final actualizado",
       *             "priority": "HIGH",
       *             "description": "Documento firmado y revisado por el cliente.",
       *             "precedence": [
       *               {
       *                 "deliverableId": "deliverable-uuid-456"
       *               }
       *             ]
       *           },
       *           {
       *             "id": "deliverable-uuid-456",
       *             "name": "Checklist de inicio actualizado",
       *             "priority": "MEDIUM",
       *             "description": "Lista de verificación para el arranque revisada."
       *           }
       *         ]
       *       },
       *       {
       *         "id": "phase-uuid-456",
       *         "name": "Ejecución",
       *         "description": "Fase de ejecución de actividades actualizada.",
       *         "deliverables": [
       *           {
       *             "id": "deliverable-uuid-789",
       *             "name": "Reporte de avance actualizado",
       *             "priority": "MEDIUM",
       *             "description": "Reporte semanal de avance actualizado."
       *           }
       *         ]
       *       }
       *     ]
       */
      phases?: components["schemas"]["PhaseTemplateRequestDto"][];
    };
    PaginatedMilestoneTemplateResponseDto: {
      /** @description Lista de plantillas de hito paginadas */
      data: components["schemas"]["MilestoneTemplateResponseDto"][];
      /** @description Metadatos de paginación */
      meta: components["schemas"]["PaginationMetadataDto"];
    };
    ChangePositionRequestDto: {
      /**
       * @description ID del elemento cuya posición se va a cambiar
       * @example 68a4de9558f2907dcec74e9e
       */
      positionId: string;
      /**
       * @description Tipo de elemento cuya posición se va a cambiar
       * @example phase
       * @enum {string}
       */
      type: "milestone" | "phase" | "deliverable";
      /**
       * @description Nueva posición del elemento (índice basado en 0)
       * @example 2
       */
      newPosition: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHello: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AppController_getHealthCheck: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProjectWebhookController_receiveGenericWebhook: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Webhook recibido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookResponseDto"];
        };
      };
    };
  };
  ProjectWebhookController_receiveProjectNotification: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Payload del webhook de notificación de proyecto */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectNotificationWebhookDto"];
      };
    };
    responses: {
      /** @description Webhook recibido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookResponseDto"];
        };
      };
      /** @description Payload del webhook malformado */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookErrorResponseDto"];
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookErrorResponseDto"];
        };
      };
    };
  };
  ProjectWebhookController_receiveDeliverableCompleted: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Payload del webhook de entregable completado */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeliverableCompletedWebhookDto"];
      };
    };
    responses: {
      /** @description Webhook recibido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookResponseDto"];
        };
      };
      /** @description Payload del webhook malformado */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookErrorResponseDto"];
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookErrorResponseDto"];
        };
      };
    };
  };
  ProjectWebhookController_receiveIncidentCreated: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Payload del webhook de incidente creado */
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncidentCreatedWebhookDto"];
      };
    };
    responses: {
      /** @description Webhook recibido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookResponseDto"];
        };
      };
      /** @description Payload del webhook malformado */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookErrorResponseDto"];
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookErrorResponseDto"];
        };
      };
    };
  };
  MqttManagementController_setupProjectSystem: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Configuración del sistema MQTT del proyecto */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetupProjectSystemDto"];
      };
    };
    responses: {
      /** @description Sistema MQTT configurado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SetupProjectSystemResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ManagementErrorResponseDto"];
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ManagementErrorResponseDto"];
        };
      };
    };
  };
  MqttManagementController_simulateEvent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Datos del evento a simular */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimulateEventDto"];
      };
    };
    responses: {
      /** @description Evento simulado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SimulateEventResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ManagementErrorResponseDto"];
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ManagementErrorResponseDto"];
        };
      };
    };
  };
  MqttManagementController_listConnectors: {
    parameters: {
      query?: {
        /** @description Filtrar por estado habilitado */
        enabled?: boolean;
        /** @description Filtrar por tipo de conector */
        type?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista de conectores obtenida exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MqttManagementController_createConnector: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Datos del conector a crear */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateConnectorDto"];
      };
    };
    responses: {
      /** @description Conector creado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateConnectorResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ManagementErrorResponseDto"];
        };
      };
    };
  };
  MqttManagementController_getConnector: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID del conector */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Conector encontrado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conector no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ManagementErrorResponseDto"];
        };
      };
    };
  };
  MqttManagementController_listActions: {
    parameters: {
      query?: {
        /** @description Filtrar por estado habilitado */
        enabled?: boolean;
        /** @description Filtrar por tipo de acción */
        type?: string;
        /** @description Filtrar por ID del conector */
        connectorId?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista de acciones obtenida exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MqttManagementController_createAction: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Datos de la acción a crear */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateActionDto"];
      };
    };
    responses: {
      /** @description Acción creada exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateActionResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ManagementErrorResponseDto"];
        };
      };
    };
  };
  MqttManagementController_listRules: {
    parameters: {
      query?: {
        /** @description Filtrar por estado habilitado */
        enabled?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista de reglas obtenida exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MqttManagementController_createRule: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Datos de la regla a crear */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRuleDto"];
      };
    };
    responses: {
      /** @description Regla creada exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateRuleResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ManagementErrorResponseDto"];
        };
      };
    };
  };
  MqttDiagnosticsController_getSystemSyncStatus: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description MQTT synchronization status retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            totalUsers?: number;
            fullySynced?: number;
            partiallySynced?: number;
            notSynced?: number;
            syncRate?: number;
            usersWithIssues?: {
              userId?: string;
              email?: string;
              syncStatus?: string;
              issues?: string[];
            }[];
          };
        };
      };
    };
  };
  MqttDiagnosticsController_getUserSyncStatus: {
    parameters: {
      query: {
        /** @description User email to check */
        email: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User MQTT synchronization status retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MqttDiagnosticsController_repairAllUsers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Repair options */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description If true, only simulates the repair without making changes
           * @default false
           */
          dryRun?: boolean;
        };
      };
    };
    responses: {
      /** @description MQTT repair operation completed */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            success?: boolean;
            totalUsers?: number;
            successfulRepairs?: number;
            failedRepairs?: number;
            results?: {
              email?: string;
              success?: boolean;
              actionsPerformed?: string[];
              errors?: string[];
            }[];
          };
        };
      };
    };
  };
  MqttDiagnosticsController_repairUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description User repair options */
    requestBody: {
      content: {
        "application/json": {
          /** @description User email to repair */
          email: string;
          /**
           * @description If true, only simulates the repair without making changes
           * @default false
           */
          dryRun?: boolean;
        };
      };
    };
    responses: {
      /** @description User MQTT repair operation completed */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MqttDiagnosticsController_verifySystemConsistency: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description System consistency check completed */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            consistent?: boolean;
            issues?: string[];
            recommendations?: string[];
            summary?: Record<string, never>;
          };
        };
      };
    };
  };
  MqttDiagnosticsController_performAutomaticRecovery: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Recovery options */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description If true, only simulates the recovery without making changes
           * @default false
           */
          dryRun?: boolean;
        };
      };
    };
    responses: {
      /** @description Automatic recovery operation completed */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            success?: boolean;
            actionsPerformed?: string[];
            errors?: string[];
            summary?: Record<string, never>;
          };
        };
      };
    };
  };
  MqttDiagnosticsController_getSystemHealth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description System health summary retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_getMyProfile_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfil del usuario actual */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_getUsersPaginated_v1: {
    parameters: {
      query?: {
        /** @description Número de página (comenzando desde 1) */
        page?: number;
        /** @description Cantidad de elementos por página */
        size?: number;
        /** @description Filtrar por ID de rol específico */
        roleId?: string;
        /** @description Término de búsqueda para nombre, apellido o email */
        search?: string;
        /** @description Campo para ordenamiento */
        sortField?: "name" | "lastName" | "email" | "createdAt" | "updatedAt";
        /** @description Orden de clasificación */
        sortOrder?: "asc" | "desc";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista paginada de usuarios con metadatos de paginación */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedUserResponseDto"];
        };
      };
      /** @description Parámetros de paginación inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_getAllUsers_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista de usuarios */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"][];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_createUser_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequestDto"];
      };
    };
    responses: {
      /** @description Usuario creado exitosamente con datos completos de rol y permisos. Se ejecutan automáticamente: envío de email de bienvenida, sincronización con MQTT, registro de auditoría. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description Error al crear usuario */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Email ya está en uso */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Datos inválidos */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_getUserById_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Usuario encontrado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_updateUser_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequestDto"];
      };
    };
    responses: {
      /** @description Usuario actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_toggleActiveUser_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identificador del usuario */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Estado del usuario alternado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  UsersController_changeUserPassword_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordRequestDto"];
      };
    };
    responses: {
      /** @description Contraseña cambiada exitosamente. Se ejecutan automáticamente: envío de email de notificación, registro de auditoría. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description Contraseñas no coinciden o datos inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_signIn_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDto"];
      };
    };
    responses: {
      /** @description Autenticación exitosa */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description Credenciales inválidas */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Demasiados intentos */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_signOut_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Sesión cerrada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_getMe_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Usuario obtenido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_getProfile_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfil obtenido exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserProfileDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_updateProfile_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProfileDto"];
      };
    };
    responses: {
      /** @description Perfil actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserProfileDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_updatePassword_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePasswordDto"];
      };
    };
    responses: {
      /** @description Contraseña actualizada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Datos de entrada inválidos o contraseñas no coinciden */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado o contraseña actual incorrecta */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_getUserPermissions_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Permisos obtenidos exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_getTokenInfo_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Información del token */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_getMqttCredentials_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Credenciales MQTT obtenidas exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MqttCredentialsResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos para acceder a MQTT */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Usuario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Servicio MQTT temporalmente no disponible */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  AuthController_checkSession_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Estado de sesión verificado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientsController_create_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateClientRequestDto"];
      };
    };
    responses: {
      /** @description Cliente creado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientOperationResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente ya existe */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_findById_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cliente encontrado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientProfileResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_update_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateClientRequestDto"];
      };
    };
    responses: {
      /** @description Cliente actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientOperationResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_delete_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cliente eliminado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_reactivate_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cliente reactivado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_findByRuc_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        ruc: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cliente encontrado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientProfileResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_findActive_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Clientes activos encontrados */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientProfileResponseDto"][];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_findPaginated_v1: {
    parameters: {
      query?: {
        /** @description Número de página */
        page?: number;
        /** @description Número de elementos por página */
        pageSize?: number;
        /** @description Término de búsqueda */
        search?: string;
        /** @description Campo para ordenamiento */
        sortField?: "name" | "lastName" | "email" | "createdAt" | "updatedAt";
        /** @description Orden de clasificación */
        sortOrder?: "asc" | "desc";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Clientes paginados encontrados */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedClientResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_fetchSunatInfo_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        ruc: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Información SUNAT encontrada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientSunatFullInfoResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_addContact_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddContactRequestDto"];
      };
    };
    responses: {
      /** @description Contacto agregado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientContactOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_updateContact_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        email: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateContactRequestDto"];
      };
    };
    responses: {
      /** @description Contacto actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientContactOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente o contacto no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_toggleActiveContact_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Contacto activado/desactivado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientContactToggleActiveResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente o contacto no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_addAddress_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddAddressRequestDto"];
      };
    };
    responses: {
      /** @description Dirección agregada exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientAddressOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_updateAddress_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        addressId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAddressRequestDto"];
      };
    };
    responses: {
      /** @description Dirección actualizada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientAddressOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente o dirección no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ClientsController_toggleActiveAddress_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        addressId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Dirección activada/desactivada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientAddressToggleActiveResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Cliente o dirección no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  RolesController_getRolesPaginated_v1: {
    parameters: {
      query?: {
        /** @description Número de página (comenzando desde 1) */
        page?: number;
        /** @description Cantidad de elementos por página */
        size?: number;
        /** @description Término de búsqueda para nombre y descripción */
        search?: string;
        /** @description Filtrar por estado activo */
        isActive?: boolean;
        /** @description Campo para ordenamiento */
        sortField?: "name" | "createdAt" | "updatedAt";
        /** @description Orden de clasificación */
        sortOrder?: "asc" | "desc";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista paginada de roles con metadatos de paginación */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedRoleResponseDto"];
        };
      };
      /** @description Parámetros de paginación inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  RolesController_createRole_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRoleRequestDto"];
      };
    };
    responses: {
      /** @description Rol creado exitosamente con datos completos */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleOperationResponseDto"];
        };
      };
      /** @description Error al crear rol */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Nombre del rol ya está en uso */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Datos inválidos o permisos incorrectos */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Error interno del servidor */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  RolesController_getAllRoles_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista completa de roles activos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleListItemDto"][];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  RolesController_getRoleById_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Rol encontrado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleDetailResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Rol no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  RolesController_updateRole_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRoleRequestDto"];
      };
    };
    responses: {
      /** @description Rol actualizado exitosamente con sincronización de usuarios */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Rol no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Rol del sistema no puede ser modificado */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  RolesController_toggleActiveRole_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identificador del rol */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Estado del rol alternado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleOperationResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Rol no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Rol del sistema no puede ser desactivado */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  RolesController_getAvailablePermissions_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista de permisos disponibles */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AvailablePermissionsResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos suficientes */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ProjectTemplatesController_create_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectTemplateRequestDto"];
      };
    };
    responses: {
      /** @description Plantilla creada exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProjectTemplateResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla ya existe */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ProjectTemplatesController_findById_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantilla encontrada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProjectTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ProjectTemplatesController_update_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProjectTemplateRequestDto"];
      };
    };
    responses: {
      /** @description Plantilla actualizada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProjectTemplateResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ProjectTemplatesController_delete_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantilla eliminada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProjectTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ProjectTemplatesController_reactivate_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantilla reactivada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProjectTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ProjectTemplatesController_findPaginated_v1: {
    parameters: {
      query?: {
        /** @description Número de página */
        page?: number;
        /** @description Número de elementos por página */
        pageSize?: number;
        /** @description Término de búsqueda */
        search?: string;
        /** @description Campo para ordenamiento */
        sortField?: "name" | "lastName" | "email" | "createdAt" | "updatedAt";
        /** @description Orden de clasificación */
        sortOrder?: "asc" | "desc";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantillas paginadas encontradas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedProjectTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ProjectTemplatesController_findActive_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantillas activas encontradas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProjectTemplateResponseDto"][];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  ProjectTemplatesController_findDetailedById_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantilla encontrada con milestone templates expandidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProjectTemplateDetailedResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  TagController_create_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTagRequestDto"];
      };
    };
    responses: {
      /** @description Etiqueta creada exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Etiqueta ya existe */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  TagController_findById_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Etiqueta encontrada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Etiqueta no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  TagController_update_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTagRequestDto"];
      };
    };
    responses: {
      /** @description Etiqueta actualizada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Etiqueta no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  TagController_delete_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Etiqueta eliminada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Etiqueta no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Etiqueta relacionada con proyectos/plantillas */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  TagController_findByName_v1: {
    parameters: {
      query?: {
        name?: string;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Etiquetas encontradas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagResponseDto"][];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_create_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMilestoneTemplateRequestDto"];
      };
    };
    responses: {
      /** @description Plantilla de hito creada exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla ya existe */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_findById_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantilla de hito encontrada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_update_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMilestoneTemplateRequestDto"];
      };
    };
    responses: {
      /** @description Plantilla de hito actualizada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_delete_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantilla de hito eliminada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_reactivate_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantilla de hito reactivada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_toggleActive_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Estado de la plantilla de hito alternado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_findPaginated_v1: {
    parameters: {
      query?: {
        /** @description Número de página */
        page?: number;
        /** @description Número de elementos por página */
        pageSize?: number;
        /** @description Término de búsqueda */
        search?: string;
        /** @description Campo para ordenamiento */
        sortField?: "name" | "lastName" | "email" | "createdAt" | "updatedAt";
        /** @description Orden de clasificación */
        sortOrder?: "asc" | "desc";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantillas de hito paginadas encontradas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedMilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_findActive_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantillas de hito activas encontradas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"][];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_findByName_v1: {
    parameters: {
      query?: {
        name?: string;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantillas de hito encontradas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"][];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_addPhase_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PhaseTemplateRequestDto"];
      };
    };
    responses: {
      /** @description Fase agregada exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_updatePhase_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        phaseId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PhaseTemplateRequestDto"];
      };
    };
    responses: {
      /** @description Fase actualizada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito o fase no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_deletePhase_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        phaseId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Fase eliminada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito o fase no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_addDeliverable_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        phaseId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeliverableTemplateRequestDto"];
      };
    };
    responses: {
      /** @description Entregable agregado exitosamente */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito o fase no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_updateDeliverable_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        phaseId: string;
        deliverableId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeliverableTemplateRequestDto"];
      };
    };
    responses: {
      /** @description Entregable actualizado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito, fase o entregable no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_deleteDeliverable_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        phaseId: string;
        deliverableId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Entregable eliminado exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Plantilla de hito, fase o entregable no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  MilestoneTemplatesController_changePosition_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePositionRequestDto"];
      };
    };
    responses: {
      /** @description Posición cambiada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MilestoneTemplateResponseDto"];
        };
      };
      /** @description Datos de entrada inválidos */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description No autenticado */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Sin permisos */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      /** @description Elemento no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
}
