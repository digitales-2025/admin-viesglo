"use server";

import { http } from "@/lib/http/serverFetch";
import {
  CategoriesList,
  CreateDiagnostic,
  MedicalRecordFileInfo,
  MedicalRecordResponse,
  MedicalRecordsFilter,
  MedicalRecordUpdate,
  UpdateCustomSections,
  UpdateMedicalRecordDetails,
} from "../_types/medical-record.types";

const API_ENDPOINT = "/medical-records";

/**
 * Obtiene todos los registros m√©dicos
 */
export async function getMedicalRecords(
  filters?: MedicalRecordsFilter
): Promise<{ data: MedicalRecordResponse[]; success: boolean; error?: string }> {
  try {
    // Construir query params basados en los filtros proporcionados
    const queryParams = new URLSearchParams();

    if (filters?.clientId) {
      queryParams.append("clientId", filters.clientId);
    }

    if (filters?.categoryId) {
      console.log(`üîé Filtrando por categoryId: ${filters.categoryId}`);
      queryParams.append("categoryId", filters.categoryId);
    }

    if (filters?.conditionId) {
      console.log(`üîé Filtrando por conditionId: ${filters.conditionId}`);
      queryParams.append("conditionId", filters.conditionId);
    }

    const queryString = queryParams.toString();
    const endpoint = `${API_ENDPOINT}${queryString ? `?${queryString}` : ""}`;

    console.log(`üîç Obteniendo registros m√©dicos con filtros:`, JSON.stringify(filters, null, 2));
    console.log(`üì° URL de solicitud: ${process.env.BACKEND_URL}${endpoint}`);

    const [data, err] = await http.get<MedicalRecordResponse[]>(endpoint);
    if (err !== null) {
      console.error(`‚ùå Error al obtener registros m√©dicos:`, err);
      return { success: false, data: [], error: err.message || "Error al obtener registros m√©dicos" };
    }

    console.log(`‚úÖ Registros m√©dicos obtenidos. Cantidad: ${data.length}`);
    if (filters?.categoryId || filters?.conditionId) {
      console.log(`üè∑Ô∏è Filtros aplicados: ${JSON.stringify(filters)}`);
    }

    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al obtener registros m√©dicos", error);
    return { success: false, data: [], error: "Error al obtener registros m√©dicos" };
  }
}

/**
 * Obtiene un registro m√©dico por su ID
 */
export async function getMedicalRecord(
  id: string
): Promise<{ data: MedicalRecordResponse | null; success: boolean; error?: string }> {
  try {
    const [data, err] = await http.get<MedicalRecordResponse>(`${API_ENDPOINT}/${id}`);
    if (err !== null) {
      return { success: false, data: null, error: err.message || "Error al obtener registro m√©dico" };
    }
    return { success: true, data };
  } catch (error) {
    console.error("Error al obtener registro m√©dico", error);
    return { success: false, data: null, error: "Error al obtener registro m√©dico" };
  }
}

/**
 * Crea un nuevo registro m√©dico
 */
export async function createMedicalRecord(
  formData: FormData
): Promise<{ data: MedicalRecordResponse | null; success: boolean; error?: string }> {
  try {
    const [data, err] = await http.multipartPost<MedicalRecordResponse>(API_ENDPOINT, formData);

    if (err !== null) {
      return { success: false, data: null, error: err.message || "Error al crear registro m√©dico" };
    }
    return { success: true, data };
  } catch (error) {
    console.error("Error al crear registro m√©dico:", error);
    return { success: false, data: null, error: "Error al crear registro m√©dico" };
  }
}

/**
 * Obtiene informaci√≥n del certificado de aptitud m√©dica
 */
export async function getAptitudeCertificateInfo(
  id: string
): Promise<{ data: MedicalRecordFileInfo | null; success: boolean; error?: string }> {
  try {
    const [data, err] = await http.get<MedicalRecordFileInfo>(`${API_ENDPOINT}/${id}/aptitude-certificate/info`);
    if (err !== null) {
      return { success: false, data: null, error: err.message || "Error al obtener informaci√≥n del certificado" };
    }
    return { success: true, data };
  } catch (error) {
    console.error("Error al obtener informaci√≥n del certificado", error);
    return { success: false, data: null, error: "Error al obtener informaci√≥n del certificado" };
  }
}

/**
 * Obtiene informaci√≥n del informe m√©dico
 */
export async function getMedicalReportInfo(
  id: string
): Promise<{ data: MedicalRecordFileInfo | null; success: boolean; error?: string }> {
  try {
    const [data, err] = await http.get<MedicalRecordFileInfo>(`${API_ENDPOINT}/${id}/medical-report/info`);
    if (err !== null) {
      return { success: false, data: null, error: err.message || "Error al obtener informaci√≥n del informe m√©dico" };
    }
    return { success: true, data };
  } catch (error) {
    console.error("Error al obtener informaci√≥n del informe m√©dico", error);
    return { success: false, data: null, error: "Error al obtener informaci√≥n del informe m√©dico" };
  }
}

/**
 * Sube o reemplaza el certificado de aptitud m√©dica
 */
export async function uploadAptitudeCertificate(id: string, file: File): Promise<{ success: boolean; error?: string }> {
  try {
    const formData = new FormData();
    formData.append("file", file);

    const [_, err] = await http.post(`${API_ENDPOINT}/${id}/aptitude-certificate`, formData, {
      headers: {
        // No establecer Content-Type, el navegador lo establecer√° autom√°ticamente con el boundary correcto
      },
    });

    if (err !== null) {
      return { success: false, error: err.message || "Error al subir el certificado de aptitud m√©dica" };
    }
    return { success: true };
  } catch (error) {
    console.error("Error al subir el certificado de aptitud m√©dica", error);
    return { success: false, error: "Error al subir el certificado de aptitud m√©dica" };
  }
}

/**
 * Sube o reemplaza el informe m√©dico
 */
export async function uploadMedicalReport(id: string, file: File): Promise<{ success: boolean; error?: string }> {
  try {
    const formData = new FormData();
    formData.append("file", file);

    const [_, err] = await http.post(`${API_ENDPOINT}/${id}/medical-report`, formData, {
      headers: {
        // No establecer Content-Type, el navegador lo establecer√° autom√°ticamente con el boundary correcto
      },
    });

    if (err !== null) {
      return { success: false, error: err.message || "Error al subir el informe m√©dico" };
    }
    return { success: true };
  } catch (error) {
    console.error("Error al subir el informe m√©dico", error);
    return { success: false, error: "Error al subir el informe m√©dico" };
  }
}

/**
 * Descarga el certificado de aptitud m√©dica
 */
export async function downloadAptitudeCertificate(
  id: string
): Promise<{ data: Blob | null; filename: string | null; success: boolean; error?: string }> {
  try {
    console.log("‚¨áÔ∏è Iniciando descarga de certificado para ID:", id);

    const [result, err] = await http.download(`/medical-records/${id}/aptitude-certificate`);

    if (err !== null || result === null) {
      console.warn(`‚ùå Error al descargar certificado:`, err);
      return {
        success: false,
        data: null,
        filename: null,
        error: err?.message || `Error al descargar documento`,
      };
    }

    console.log("‚úÖ Certificado descargado correctamente:", result.filename);
    return {
      success: true,
      data: result.blob,
      filename: result.filename,
    };
  } catch (error) {
    console.warn("‚ùå Error inesperado al descargar el certificado", error);
    return {
      success: false,
      data: null,
      filename: null,
      error: "Error al descargar documento",
    };
  }
}

/**
 * Descarga el informe m√©dico
 */
export async function downloadMedicalReport(
  id: string
): Promise<{ data: Blob | null; filename: string | null; success: boolean; error?: string }> {
  try {
    console.log("‚¨áÔ∏è Iniciando descarga de informe para ID:", id);

    const [result, err] = await http.download(`/medical-records/${id}/medical-report`);

    if (err !== null || result === null) {
      console.warn(`‚ùå Error al descargar informe:`, err);
      return {
        success: false,
        data: null,
        filename: null,
        error: err?.message || `Error al descargar documento`,
      };
    }

    console.log("‚úÖ Informe m√©dico descargado correctamente:", result.filename);
    return {
      success: true,
      data: result.blob,
      filename: result.filename,
    };
  } catch (error) {
    console.warn("‚ùå Error inesperado al descargar el informe", error);
    return {
      success: false,
      data: null,
      filename: null,
      error: "Error al descargar documento",
    };
  }
}

/**
 * Actualiza los detalles m√©dicos de un registro
 */
export async function updateMedicalRecordDetails(
  id: string,
  details: UpdateMedicalRecordDetails
): Promise<{ data: MedicalRecordResponse | null; success: boolean; error?: string }> {
  try {
    console.log(`üìù Actualizando detalles m√©dicos para el registro con ID: ${id}`);
    console.log(`üìä Datos enviados:`, JSON.stringify(details).substring(0, 500) + "...");

    const [data, err] = await http.patch<MedicalRecordResponse>(`${API_ENDPOINT}/${id}/details`, details);

    if (err !== null) {
      console.error(`‚ùå Error al actualizar detalles m√©dicos:`, err);
      return { success: false, data: null, error: err.message || "Error al actualizar detalles m√©dicos" };
    }

    console.log(`‚úÖ Detalles m√©dicos actualizados correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al actualizar detalles m√©dicos", error);
    return { success: false, data: null, error: "Error al actualizar detalles m√©dicos" };
  }
}

/**
 * Actualiza las secciones personalizadas de un registro m√©dico
 */
export async function updateCustomSections(
  id: string,
  customSections: UpdateCustomSections
): Promise<{ data: MedicalRecordResponse | null; success: boolean; error?: string }> {
  try {
    console.log(`üîÑ Actualizando secciones personalizadas para el registro m√©dico con ID: ${id}`);
    console.log(`üìä Datos enviados:`, JSON.stringify(customSections).substring(0, 500) + "...");

    const [data, err] = await http.patch<MedicalRecordResponse>(
      `${API_ENDPOINT}/${id}/custom-sections`,
      customSections
    );

    if (err !== null) {
      console.error(`‚ùå Error al actualizar secciones personalizadas:`, err);
      return { success: false, data: null, error: err.message || "Error al actualizar secciones personalizadas" };
    }

    console.log(
      `‚úÖ Secciones personalizadas actualizadas correctamente:`,
      JSON.stringify(data).substring(0, 200) + "..."
    );
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al actualizar secciones personalizadas", error);
    return { success: false, data: null, error: "Error al actualizar secciones personalizadas" };
  }
}

/**
 * Actualiza un registro m√©dico
 */
export async function updateMedicalRecord(
  id: string,
  data: MedicalRecordUpdate
): Promise<{ data: MedicalRecordResponse | null; success: boolean; error?: string }> {
  try {
    console.log(`üìù Actualizando registro m√©dico con ID: ${id}`);
    console.log(`üìä Datos enviados:`, JSON.stringify(data).substring(0, 500) + "...");

    const [response, err] = await http.patch<MedicalRecordResponse>(`${API_ENDPOINT}/${id}`, data);

    if (err !== null) {
      console.error(`‚ùå Error al actualizar registro m√©dico:`, err);
      return { success: false, data: null, error: err.message || "Error al actualizar registro m√©dico" };
    }

    console.log(`‚úÖ Registro m√©dico actualizado correctamente:`, JSON.stringify(response).substring(0, 200) + "...");
    return { success: true, data: response };
  } catch (error) {
    console.error("‚ùå Error al actualizar registro m√©dico", error);
    return { success: false, data: null, error: "Error al actualizar registro m√©dico" };
  }
}

/**
 * Elimina un registro m√©dico
 */
export async function deleteMedicalRecord(id: string): Promise<{ success: boolean; error?: string }> {
  try {
    console.log(`üóëÔ∏è Eliminando registro m√©dico con ID: ${id}`);

    const [_, err] = await http.delete(`${API_ENDPOINT}/${id}`);

    if (err !== null) {
      console.error(`‚ùå Error al eliminar registro m√©dico:`, err);
      return { success: false, error: err.message || "Error al eliminar registro m√©dico" };
    }

    console.log(`‚úÖ Registro m√©dico eliminado correctamente`);
    return { success: true };
  } catch (error) {
    console.error("‚ùå Error al eliminar registro m√©dico", error);
    return { success: false, error: "Error al eliminar registro m√©dico" };
  }
}

/**
 * Obtiene todos los diagn√≥sticos de un registro m√©dico
 */
export async function getDiagnostics(id: string): Promise<{ data: any[]; success: boolean; error?: string }> {
  try {
    console.log(`üîç Obteniendo diagn√≥sticos del registro m√©dico con ID: ${id}`);

    const [data, err] = await http.get<any[]>(`${API_ENDPOINT}/${id}/diagnostics`);

    if (err !== null) {
      console.error(`‚ùå Error al obtener diagn√≥sticos:`, err);
      return { success: false, data: [], error: err.message || "Error al obtener diagn√≥sticos" };
    }

    console.log(`‚úÖ Diagn√≥sticos obtenidos correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al obtener diagn√≥sticos", error);
    return { success: false, data: [], error: "Error al obtener diagn√≥sticos" };
  }
}

/**
 * Agrega un diagn√≥stico a un registro m√©dico
 */
export async function addDiagnostic(
  id: string,
  diagnostic: CreateDiagnostic
): Promise<{ data: any; success: boolean; error?: string }> {
  try {
    console.log(`‚ûï Agregando diagn√≥stico al registro m√©dico con ID: ${id}`);
    console.log(`üìä Datos enviados:`, JSON.stringify(diagnostic));

    const [data, err] = await http.post<any>(`${API_ENDPOINT}/${id}/diagnostics`, diagnostic);

    if (err !== null) {
      console.error(`‚ùå Error al agregar diagn√≥stico:`, err);
      return { success: false, data: null, error: err.message || "Error al agregar diagn√≥stico" };
    }

    console.log(`‚úÖ Diagn√≥stico agregado correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al agregar diagn√≥stico", error);
    return { success: false, data: null, error: "Error al agregar diagn√≥stico" };
  }
}

/**
 * Elimina un diagn√≥stico de un registro m√©dico
 */
export async function deleteDiagnostic(
  id: string,
  diagnosticId: string
): Promise<{ success: boolean; error?: string }> {
  try {
    console.log(`üóëÔ∏è Eliminando diagn√≥stico ${diagnosticId} del registro m√©dico con ID: ${id}`);

    const [_, err] = await http.delete(`${API_ENDPOINT}/${id}/diagnostics/${diagnosticId}`);

    if (err !== null) {
      console.error(`‚ùå Error al eliminar diagn√≥stico:`, err);
      return { success: false, error: err.message || "Error al eliminar diagn√≥stico" };
    }

    console.log(`‚úÖ Diagn√≥stico eliminado correctamente`);
    return { success: true };
  } catch (error) {
    console.error("‚ùå Error al eliminar diagn√≥stico", error);
    return { success: false, error: "Error al eliminar diagn√≥stico" };
  }
}

/**
 * Obtiene todas las categor√≠as m√©dicas y sus condiciones
 */
export async function getAllMedicalCategories(): Promise<{
  data: CategoriesList | null;
  success: boolean;
  error?: string;
}> {
  try {
    console.log(`üîç Obteniendo todas las categor√≠as m√©dicas y sus condiciones`);

    const [data, err] = await http.get<CategoriesList>(`${API_ENDPOINT}/categories/all`);

    if (err !== null) {
      console.error(`‚ùå Error al obtener categor√≠as m√©dicas:`, err);
      return { success: false, data: null, error: err.message || "Error al obtener categor√≠as m√©dicas" };
    }

    console.log(`‚úÖ Categor√≠as m√©dicas obtenidas correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al obtener categor√≠as m√©dicas", error);
    return { success: false, data: null, error: "Error al obtener categor√≠as m√©dicas" };
  }
}
