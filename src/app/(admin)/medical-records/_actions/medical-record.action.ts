"use server";

import { http } from "@/lib/http/serverFetch";
import {
  CreateDiagnostic,
  DiagnosticEntity,
  MedicalRecordFileInfo,
  MedicalRecordResponse,
  MedicalRecordsFilter,
  MedicalRecordUpdate,
  UpdateMedicalRecordDetails,
} from "../_types/medical-record.types";

const API_ENDPOINT = "/medical-records";
const DIAGNOSTICS_API_ENDPOINT = "/diagnostics";

/**
 * Obtiene todos los registros m√©dicos
 */
export async function getMedicalRecords(
  filters?: MedicalRecordsFilter
): Promise<{ data: MedicalRecordResponse[]; meta?: any; success: boolean; error?: string }> {
  try {
    // Construir query params basados en los filtros proporcionados
    const queryParams = new URLSearchParams();

    if (filters) {
      // Procesar cada filtro disponible
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== "") {
          // Manejar fechas - convertir a ISO string
          if (value instanceof Date) {
            queryParams.append(key, value.toISOString().split("T")[0]); // Enviar solo YYYY-MM-DD
          } else {
            queryParams.append(key, String(value));
          }
        }
      });
    }

    // Asegurar valores predeterminados para paginaci√≥n si no est√°n en los filtros
    if (!queryParams.has("page")) {
      queryParams.append("page", "1");
    }
    if (!queryParams.has("limit")) {
      queryParams.append("limit", "10");
    }

    const queryString = queryParams.toString();
    const endpoint = `${API_ENDPOINT}${queryString ? `?${queryString}` : ""}`;

    console.log(`üîç Obteniendo registros m√©dicos con filtros:`, JSON.stringify(filters, null, 2));
    console.log(`üì° URL de solicitud: ${process.env.BACKEND_URL}${endpoint}`);

    const [response, err] = await http.get<any>(endpoint);
    if (err !== null) {
      console.error(`‚ùå Error al obtener registros m√©dicos:`, err);
      return { success: false, data: [], error: err.message || "Error al obtener registros m√©dicos" };
    }

    // Manejar tanto respuestas paginadas como no paginadas
    // Si la respuesta tiene formato { data, meta }, es una respuesta paginada
    if (response.data && response.meta) {
      console.log(
        `‚úÖ Registros m√©dicos obtenidos. Cantidad: ${response.data.length}. P√°gina ${response.meta.currentPage} de ${response.meta.totalPages}`
      );
      return {
        success: true,
        data: response.data,
        meta: response.meta,
      };
    }

    // Si no, debe ser un array simple (formato antiguo)
    console.log(
      `‚úÖ Registros m√©dicos obtenidos (formato no paginado). Cantidad: ${Array.isArray(response) ? response.length : 0}`
    );
    return { success: true, data: Array.isArray(response) ? response : [] }; // Asegurarse que data sea siempre un array
  } catch (error) {
    console.error("‚ùå Error al obtener registros m√©dicos", error);
    return { success: false, data: [], error: "Error al obtener registros m√©dicos" };
  }
}

/**
 * Obtiene un registro m√©dico por su ID
 */
export async function getMedicalRecord(
  id: string
): Promise<{ data: MedicalRecordResponse | null; success: boolean; error?: string }> {
  try {
    const [data, err] = await http.get<MedicalRecordResponse>(`${API_ENDPOINT}/${id}`);
    if (err !== null) {
      return { success: false, data: null, error: err.message || "Error al obtener registro m√©dico" };
    }
    return { success: true, data };
  } catch (error) {
    console.error("Error al obtener registro m√©dico", error);
    return { success: false, data: null, error: "Error al obtener registro m√©dico" };
  }
}

/**
 * Crea un nuevo registro m√©dico
 */
export async function createMedicalRecord(
  formData: FormData
): Promise<{ data: MedicalRecordResponse | null; success: boolean; error?: string }> {
  try {
    const [data, err] = await http.multipartPost<MedicalRecordResponse>(API_ENDPOINT, formData);

    if (err !== null) {
      return { success: false, data: null, error: err.message || "Error al crear registro m√©dico" };
    }
    return { success: true, data };
  } catch (error) {
    console.error("Error al crear registro m√©dico:", error);
    return { success: false, data: null, error: "Error al crear registro m√©dico" };
  }
}

/**
 * Obtiene informaci√≥n del certificado de aptitud m√©dica
 */
export async function getAptitudeCertificateInfo(
  id: string
): Promise<{ data: MedicalRecordFileInfo | null; success: boolean; error?: string }> {
  try {
    const [data, err] = await http.get<MedicalRecordFileInfo>(`${API_ENDPOINT}/${id}/aptitude-certificate/info`);
    if (err !== null) {
      return { success: false, data: null, error: err.message || "Error al obtener informaci√≥n del certificado" };
    }
    return { success: true, data };
  } catch (error) {
    console.error("Error al obtener informaci√≥n del certificado", error);
    return { success: false, data: null, error: "Error al obtener informaci√≥n del certificado" };
  }
}

/**
 * Obtiene informaci√≥n del informe m√©dico
 */
export async function getMedicalReportInfo(
  id: string
): Promise<{ data: MedicalRecordFileInfo | null; success: boolean; error?: string }> {
  try {
    const [data, err] = await http.get<MedicalRecordFileInfo>(`${API_ENDPOINT}/${id}/medical-report/info`);
    if (err !== null) {
      return { success: false, data: null, error: err.message || "Error al obtener informaci√≥n del informe m√©dico" };
    }
    return { success: true, data };
  } catch (error) {
    console.error("Error al obtener informaci√≥n del informe m√©dico", error);
    return { success: false, data: null, error: "Error al obtener informaci√≥n del informe m√©dico" };
  }
}

/**
 * Sube o reemplaza el certificado de aptitud m√©dica
 */
export async function uploadAptitudeCertificate(id: string, file: File): Promise<{ success: boolean; error?: string }> {
  try {
    const formData = new FormData();
    formData.append("file", file);

    const [_, err] = await http.multipartPost(`${API_ENDPOINT}/${id}/aptitude-certificate`, formData);

    if (err !== null) {
      return { success: false, error: err.message || "Error al subir el certificado de aptitud m√©dica" };
    }
    return { success: true };
  } catch (error) {
    console.error("Error al subir el certificado de aptitud m√©dica", error);
    return { success: false, error: "Error al subir el certificado de aptitud m√©dica" };
  }
}

/**
 * Sube o reemplaza el informe m√©dico
 */
export async function uploadMedicalReport(id: string, file: File): Promise<{ success: boolean; error?: string }> {
  try {
    const formData = new FormData();
    formData.append("file", file);

    const [_, err] = await http.multipartPost(`${API_ENDPOINT}/${id}/medical-report`, formData);

    if (err !== null) {
      return { success: false, error: err.message || "Error al subir el informe m√©dico" };
    }
    return { success: true };
  } catch (error) {
    console.error("Error al subir el informe m√©dico", error);
    return { success: false, error: "Error al subir el informe m√©dico" };
  }
}

/**
 * Descarga el certificado de aptitud m√©dica
 */
export async function downloadAptitudeCertificate(id: string) {
  // Esta funci√≥n usa las nuevas utilidades para obtener la respuesta completa de descarga
  try {
    // Hacer la solicitud para verificar que el archivo existe y obtener metadatos
    const [_, err, response] = await http.downloadFile(`${API_ENDPOINT}/${id}/aptitude-certificate`);
    if (err !== null) {
      throw new Error(err.message || "Error al descargar certificado");
    }

    // Si tenemos una respuesta, extraemos la informaci√≥n necesaria para la descarga
    if (response) {
      // Obtener el nombre del archivo del Content-Disposition
      const contentDisposition = response.headers.get("Content-Disposition");
      let filename = "evidence";
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename="(.+)"/);
        if (filenameMatch && filenameMatch[1]) {
          filename = filenameMatch[1];
        }
      }

      const contentType = response.headers.get("Content-Type") || "application/octet-stream";

      // En lugar de intentar procesar el blob aqu√≠, devolvemos la informaci√≥n necesaria
      // para que el cliente pueda hacer la solicitud correctamente
      return {
        success: true,
        // URL absoluta al backend para descarga directa (no la ruta relativa de la API)
        // Esto es importante porque la URL relativa de la API puede estar redirigiendo a un HTML
        downloadUrl: process.env.BACKEND_URL + `${API_ENDPOINT}/${id}/aptitude-certificate`,
        filename,
        contentType,
      };
    }

    // Si no hay respuesta pero tampoco error, informamos de √©xito pero sin datos
    return { success: true };
  } catch (error) {
    console.error("Error al descargar certificado", error);
    return { success: false, error: "Error al descargar certificado" };
  }
}

/**
 * Descarga el informe m√©dico
 */
export async function downloadMedicalReport(id: string) {
  // Esta funci√≥n usa las nuevas utilidades para obtener la respuesta completa de descarga
  try {
    // Hacer la solicitud para verificar que el archivo existe y obtener metadatos
    const [_, err, response] = await http.downloadFile(`${API_ENDPOINT}/${id}/medical-report`);
    if (err !== null) {
      throw new Error(err.message || "Error al descargar informe");
    }

    // Si tenemos una respuesta, extraemos la informaci√≥n necesaria para la descarga
    if (response) {
      // Obtener el nombre del archivo del Content-Disposition
      const contentDisposition = response.headers.get("Content-Disposition");
      let filename = "evidence";
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename="(.+)"/);
        if (filenameMatch && filenameMatch[1]) {
          filename = filenameMatch[1];
        }
      }

      const contentType = response.headers.get("Content-Type") || "application/octet-stream";

      // En lugar de intentar procesar el blob aqu√≠, devolvemos la informaci√≥n necesaria
      // para que el cliente pueda hacer la solicitud correctamente
      return {
        success: true,
        // URL absoluta al backend para descarga directa (no la ruta relativa de la API)
        // Esto es importante porque la URL relativa de la API puede estar redirigiendo a un HTML
        downloadUrl: process.env.BACKEND_URL + `${API_ENDPOINT}/${id}/medical-report`,
        filename,
        contentType,
      };
    }

    // Si no hay respuesta pero tampoco error, informamos de √©xito pero sin datos
    return { success: true };
  } catch (error) {
    console.error("Error al descargar informe", error);
    return { success: false, error: "Error al descargar informe" };
  }
}

/**
 * Actualiza los detalles m√©dicos de un registro
 */
export async function updateMedicalRecordDetails(
  id: string,
  details: UpdateMedicalRecordDetails
): Promise<{ data: MedicalRecordResponse | null; success: boolean; error?: string }> {
  try {
    console.log(`üìù Actualizando detalles m√©dicos para el registro con ID: ${id}`);
    console.log(`üìä Datos enviados:`, JSON.stringify(details).substring(0, 500) + "...");

    const [data, err] = await http.patch<MedicalRecordResponse>(`${API_ENDPOINT}/${id}/details`, details);

    if (err !== null) {
      console.error(`‚ùå Error al actualizar detalles m√©dicos:`, err);
      return { success: false, data: null, error: err.message || "Error al actualizar detalles m√©dicos" };
    }

    console.log(`‚úÖ Detalles m√©dicos actualizados correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al actualizar detalles m√©dicos", error);
    return { success: false, data: null, error: "Error al actualizar detalles m√©dicos" };
  }
}

/**
 * Actualiza un registro m√©dico
 */
export async function updateMedicalRecord(
  id: string,
  data: MedicalRecordUpdate
): Promise<{ data: MedicalRecordResponse | null; success: boolean; error?: string }> {
  try {
    console.log(`üìù Actualizando registro m√©dico con ID: ${id}`);
    console.log(`üìä Datos enviados:`, JSON.stringify(data).substring(0, 500) + "...");

    const [response, err] = await http.patch<MedicalRecordResponse>(`${API_ENDPOINT}/${id}`, data);

    if (err !== null) {
      console.error(`‚ùå Error al actualizar registro m√©dico:`, err);
      return { success: false, data: null, error: err.message || "Error al actualizar registro m√©dico" };
    }

    console.log(`‚úÖ Registro m√©dico actualizado correctamente:`, JSON.stringify(response).substring(0, 200) + "...");
    return { success: true, data: response };
  } catch (error) {
    console.error("‚ùå Error al actualizar registro m√©dico", error);
    return { success: false, data: null, error: "Error al actualizar registro m√©dico" };
  }
}

/**
 * Elimina un registro m√©dico
 */
export async function deleteMedicalRecord(id: string): Promise<{ success: boolean; error?: string }> {
  try {
    console.log(`üóëÔ∏è Eliminando registro m√©dico con ID: ${id}`);

    const [_, err] = await http.delete(`${API_ENDPOINT}/${id}`);

    if (err !== null) {
      console.error(`‚ùå Error al eliminar registro m√©dico:`, err);
      return { success: false, error: err.message || "Error al eliminar registro m√©dico" };
    }

    console.log(`‚úÖ Registro m√©dico eliminado correctamente`);
    return { success: true };
  } catch (error) {
    console.error("‚ùå Error al eliminar registro m√©dico", error);
    return { success: false, error: "Error al eliminar registro m√©dico" };
  }
}

/**
 * Obtiene todos los diagn√≥sticos de un registro m√©dico
 */
export async function getDiagnostics(id: string): Promise<{ data: any[]; success: boolean; error?: string }> {
  try {
    console.log(`üîç Obteniendo diagn√≥sticos del registro m√©dico con ID: ${id}`);

    // Endpoint correcto seg√∫n diagnostics.controller.ts
    const endpoint = `/diagnostics/medical-records/${id}/diagnostics`;
    console.log(`üîç Usando endpoint: ${process.env.BACKEND_URL}${endpoint}`);

    const [data, err] = await http.get<any[]>(endpoint);

    if (err !== null) {
      console.error(`‚ùå Error al obtener diagn√≥sticos:`, err);
      return { success: false, data: [], error: err.message || "Error al obtener diagn√≥sticos" };
    }

    console.log(`‚úÖ Diagn√≥sticos obtenidos correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al obtener diagn√≥sticos", error);
    return { success: false, data: [], error: "Error al obtener diagn√≥sticos" };
  }
}

/**
 * Agrega un diagn√≥stico a un registro m√©dico
 */
export async function addDiagnostic(
  id: string,
  diagnostic: CreateDiagnostic
): Promise<{ data: any; success: boolean; error?: string }> {
  try {
    console.log(`‚ûï Agregando diagn√≥stico al registro m√©dico con ID: ${id}`);
    console.log(`üìä Datos enviados:`, JSON.stringify(diagnostic));

    // Endpoint correcto seg√∫n diagnostics.controller.ts
    const endpoint = `/diagnostics/medical-records/${id}/diagnostics`;
    console.log(`üîç Usando endpoint: ${process.env.BACKEND_URL}${endpoint}`);

    const [data, err] = await http.post<any>(endpoint, diagnostic);

    if (err !== null) {
      console.error(`‚ùå Error al agregar diagn√≥stico:`, err);
      return { success: false, data: null, error: err.message || "Error al agregar diagn√≥stico" };
    }

    console.log(`‚úÖ Diagn√≥stico agregado correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al agregar diagn√≥stico", error);
    return { success: false, data: null, error: "Error al agregar diagn√≥stico" };
  }
}

/**
 * Elimina un diagn√≥stico de un registro m√©dico
 */
export async function deleteDiagnostic(
  id: string,
  diagnosticId: string
): Promise<{ success: boolean; error?: string }> {
  try {
    console.log(`üóëÔ∏è Eliminando diagn√≥stico ${diagnosticId} del registro m√©dico con ID: ${id}`);

    // Endpoint correcto seg√∫n diagnostics.controller.ts
    const endpoint = `/diagnostics/medical-records/${id}/diagnostics/${diagnosticId}`;
    console.log(`üîç Usando endpoint: ${process.env.BACKEND_URL}${endpoint}`);

    const [_, err] = await http.delete(endpoint);

    if (err !== null) {
      // Verificar si es un 404, lo que podr√≠a significar que no est√° implementado
      if (err.statusCode === 404) {
        console.error(`‚ùå Error 404: El endpoint para eliminar diagn√≥sticos no est√° implementado en el servidor.`);
        console.error(`‚ùå IMPORTANTE: Debe implementar la ruta DELETE ${endpoint} en el servidor.`);
        return {
          success: false,
          error: `El endpoint para eliminar diagn√≥sticos no est√° implementado (404). Contacte al administrador del sistema.`,
        };
      }

      console.error(`‚ùå Error al eliminar diagn√≥stico:`, err);
      return { success: false, error: err.message || "Error al eliminar diagn√≥stico" };
    }

    console.log(`‚úÖ Diagn√≥stico eliminado correctamente`);
    return { success: true };
  } catch (error) {
    console.error("‚ùå Error al eliminar diagn√≥stico", error);
    return { success: false, error: "Error al eliminar diagn√≥stico" };
  }
}

/**
 * Obtiene todas las categor√≠as m√©dicas y sus condiciones
 */
export async function getAllMedicalCategories(): Promise<{
  data: any | null;
  success: boolean;
  error?: string;
}> {
  try {
    console.log(`üîç Obteniendo todas las categor√≠as m√©dicas y sus condiciones`);

    const [data, err] = await http.get<any>(`${API_ENDPOINT}/categories/all`);

    if (err !== null) {
      console.error(`‚ùå Error al obtener categor√≠as m√©dicas:`, err);
      return { success: false, data: null, error: err.message || "Error al obtener categor√≠as m√©dicas" };
    }

    console.log(`‚úÖ Categor√≠as m√©dicas obtenidas correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al obtener categor√≠as m√©dicas", error);
    return { success: false, data: null, error: "Error al obtener categor√≠as m√©dicas" };
  }
}

/**
 * Agrega m√∫ltiples diagn√≥sticos a un registro m√©dico
 */
export async function addMultipleDiagnostics(
  id: string,
  diagnostics: CreateDiagnostic[]
): Promise<{ data: any; success: boolean; error?: string }> {
  try {
    console.log(`‚ûï Agregando m√∫ltiples diagn√≥sticos al registro m√©dico con ID: ${id}`);
    console.log(`üìä Cantidad de diagn√≥sticos: ${diagnostics.length}`);

    // Log exact endpoint we're calling
    const endpoint = `/diagnostics/medical-records/${id}/bulk-diagnostics`;
    console.log(`üîç Endpoint completo: ${process.env.BACKEND_URL}${endpoint}`);

    // Realizar una copia profunda y asegurar la estructura correcta
    const normalizedDiagnostics = diagnostics.map((diagnostic, index) => {
      console.log(`üîç Verificando estructura de diagn√≥stico #${index + 1}:`);

      // Determinar si estamos usando diagnosticId o diagnosticValueId
      const useDiagnosticId = !!diagnostic.diagnosticId;
      const useDiagnosticValueId = !!diagnostic.diagnosticValueId;

      console.log(`   - Usando diagnosticId: ${useDiagnosticId}`);
      console.log(`   - Usando diagnosticValueId: ${useDiagnosticValueId}`);
      console.log(`   - Tipo de values:`, typeof diagnostic.values);
      console.log(`   - ¬øValues es array?:`, Array.isArray(diagnostic.values));

      if (Array.isArray(diagnostic.values)) {
        // Verificar que todos los elementos sean strings
        const allStrings = diagnostic.values.every((v) => typeof v === "string");
        console.log(`   - ¬øTodos los valores son strings?:`, allStrings);

        if (!allStrings) {
          console.log(
            `   - Valores que no son strings:`,
            diagnostic.values.filter((v) => typeof v !== "string")
          );
        }
      }

      // Asegurar que values sea un array de strings
      const normalizedValues = Array.isArray(diagnostic.values)
        ? diagnostic.values.map((v) => String(v))
        : [String(diagnostic.values || "")];

      // Normalizar la estructura seg√∫n si usamos diagnosticId o diagnosticValueId
      if (useDiagnosticId) {
        return {
          diagnosticId: diagnostic.diagnosticId,
          values: normalizedValues,
          isReportIncluded: diagnostic.isReportIncluded !== undefined ? diagnostic.isReportIncluded : true,
        };
      } else if (useDiagnosticValueId) {
        return {
          diagnosticValueId: diagnostic.diagnosticValueId,
          values: normalizedValues,
        };
      } else {
        console.error(`‚ùå Diagn√≥stico #${index + 1} no tiene ni diagnosticId ni diagnosticValueId`);
        // Devolver un objeto m√≠nimo para evitar errores, aunque este ser√° filtrado despu√©s
        return { values: [] };
      }
    });

    // Filtrar diagn√≥sticos inv√°lidos (sin ID)
    const validDiagnostics = normalizedDiagnostics.filter((d) => d.diagnosticId || d.diagnosticValueId);

    // Format payload according to the CreateMultipleDiagnosticsDto
    const payload: any = { diagnostics: validDiagnostics };
    console.log(`üì§ Payload exacto a enviar (despu√©s de normalizar):`, JSON.stringify(payload));

    // Realizar la llamada a la API con manejo de errores mejorado
    console.log(`üì° Enviando petici√≥n POST a: ${endpoint}`);
    const [data, err] = await http.post<any>(endpoint, payload);

    if (err !== null) {
      console.error(`‚ùå Error al agregar m√∫ltiples diagn√≥sticos:`, err);
      console.error(`‚ùå C√≥digo de error:`, err.statusCode);
      console.error(`‚ùå Mensaje de error:`, err.message);
      console.error(`‚ùå Detalles completos del error:`, JSON.stringify(err));

      return {
        success: false,
        data: null,
        error: err.message || "Error al agregar m√∫ltiples diagn√≥sticos",
      };
    }

    console.log(`‚úÖ Diagn√≥sticos agregados correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al agregar m√∫ltiples diagn√≥sticos", error);
    console.error("‚ùå Stack trace:", error instanceof Error ? error.stack : "No stack trace disponible");
    return {
      success: false,
      data: null,
      error: "Error al agregar m√∫ltiples diagn√≥sticos",
    };
  }
}

/**
 * Agrega un valor de diagn√≥stico personalizado a un registro m√©dico
 */
export async function addDiagnosticValue(
  id: string,
  name: string,
  values: string[]
): Promise<{ data: any; success: boolean; error?: string }> {
  try {
    console.log(`‚ûï Agregando diagn√≥stico personalizado "${name}" al registro m√©dico con ID: ${id}`);

    // Endpoint para a√±adir valor de diagn√≥stico personalizado
    const endpoint = `/diagnostics/medical-records/${id}/diagnostic-value`;
    console.log(`üîç Usando endpoint: ${process.env.BACKEND_URL}${endpoint}`);

    const payload = {
      name,
      value: values,
    };

    console.log(`üìä Datos enviados:`, JSON.stringify(payload));

    const [data, err] = await http.post<any>(endpoint, payload);

    if (err !== null) {
      console.error(`‚ùå Error al agregar diagn√≥stico personalizado:`, err);
      return {
        success: false,
        data: null,
        error: err.message || "Error al agregar diagn√≥stico personalizado",
      };
    }

    console.log(`‚úÖ Diagn√≥stico personalizado agregado correctamente:`, JSON.stringify(data).substring(0, 200) + "...");
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al agregar diagn√≥stico personalizado", error);
    return {
      success: false,
      data: null,
      error: "Error al agregar diagn√≥stico personalizado",
    };
  }
}

/**
 * Actualiza el nombre de un valor de diagn√≥stico personalizado
 */
export async function updateDiagnosticValueName(
  diagnosticValueId: string,
  name: string
): Promise<{ data: any; success: boolean; error?: string }> {
  try {
    console.log(`‚úèÔ∏è Actualizando nombre de diagn√≥stico personalizado con ID: ${diagnosticValueId}`);
    console.log(`üìù Nuevo nombre: "${name}"`);

    // Endpoint para actualizar nombre de diagn√≥stico personalizado
    const endpoint = `/diagnostics/diagnostic-values/${diagnosticValueId}/name`;
    console.log(`üîç Usando endpoint: ${process.env.BACKEND_URL}${endpoint}`);

    const payload = {
      name,
    };

    console.log(`üìä Datos enviados:`, JSON.stringify(payload));

    const [data, err] = await http.patch<any>(endpoint, payload);

    if (err !== null) {
      console.error(`‚ùå Error al actualizar nombre del diagn√≥stico personalizado:`, err);
      return {
        success: false,
        data: null,
        error: err.message || "Error al actualizar nombre del diagn√≥stico personalizado",
      };
    }

    console.log(
      `‚úÖ Nombre del diagn√≥stico personalizado actualizado correctamente:`,
      JSON.stringify(data).substring(0, 200) + "..."
    );
    return { success: true, data };
  } catch (error) {
    console.error("‚ùå Error al actualizar nombre del diagn√≥stico personalizado", error);
    return {
      success: false,
      data: null,
      error: "Error al actualizar nombre del diagn√≥stico personalizado",
    };
  }
}

/**
 * Obtiene todos los diagn√≥sticos disponibles en el sistema
 */
export async function getAllAvailableDiagnostics(): Promise<{
  data: DiagnosticEntity[];
  success: boolean;
  error?: string;
}> {
  try {
    console.log(`üîç Obteniendo todos los diagn√≥sticos disponibles`);
    const endpoint = `${DIAGNOSTICS_API_ENDPOINT}`;
    console.log(`üì° URL de solicitud: ${process.env.BACKEND_URL}${endpoint}`);

    // Asumimos que el endpoint GET /diagnostics devuelve un objeto { diagnostics: DiagnosticEntity[] }
    const [response, err] = await http.get<{ diagnostics: DiagnosticEntity[] }>(endpoint);

    if (err !== null) {
      console.error(`‚ùå Error al obtener diagn√≥sticos disponibles:`, err);
      return { success: false, data: [], error: err.message || "Error al obtener diagn√≥sticos disponibles" };
    }

    // Extraer el array de diagn√≥sticos de la respuesta
    const diagnostics = response.diagnostics || [];
    console.log(`‚úÖ Diagn√≥sticos disponibles obtenidos. Cantidad: ${diagnostics.length}`);

    return { success: true, data: diagnostics };
  } catch (error) {
    console.error("‚ùå Error cr√≠tico al obtener diagn√≥sticos disponibles", error);
    return { success: false, data: [], error: "Error cr√≠tico al obtener diagn√≥sticos disponibles" };
  }
}
